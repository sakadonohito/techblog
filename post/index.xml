<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 開発メモてきな</title>
    <link>http://tech.k-zak.com/post/index.xml</link>
    <description>Recent content in Posts on 開発メモてきな</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 23 Mar 2017 21:47:31 +0900</lastBuildDate>
    <atom:link href="http://tech.k-zak.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>2017 03 23 utf8</title>
      <link>http://tech.k-zak.com/2017/03/23/2017-03-23-utf8</link>
      <pubDate>Thu, 23 Mar 2017 21:47:31 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/03/23/2017-03-23-utf8</guid>
      <description>

&lt;h1 id=&#34;utf-8-mac-にまたしてもやられた&#34;&gt;UTF-8-MAC にまたしてもやられた&lt;/h1&gt;

&lt;p&gt;全角のチルダだか波ダッシュだかがmacOSの時とそれ以外で違う文字コードなのか別の文字なのか、とにかく想定外の文字コードのものがバリデーションをすり抜けてきた。&lt;/p&gt;

&lt;p&gt;一つのOS上で禁止文字を羅列して出来たつもりになってたけどUTF−8−MACにはこれからも悩まされるんだろうなー。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bitbucketいいかも</title>
      <link>http://tech.k-zak.com/2017/03/23/bitbucket%E3%81%84%E3%81%84%E3%81%8B%E3%82%82</link>
      <pubDate>Thu, 23 Mar 2017 21:47:01 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/03/23/bitbucket%E3%81%84%E3%81%84%E3%81%8B%E3%82%82</guid>
      <description>

&lt;h1 id=&#34;bitbucketけっこういいかも&#34;&gt;Bitbucketけっこういいかも&lt;/h1&gt;

&lt;p&gt;プライベートリポジトリ欲しくてBitbucket試してみた。&lt;/p&gt;

&lt;h2 id=&#34;乾燥&#34;&gt;乾燥&lt;/h2&gt;

&lt;p&gt;Gitが使えるのでhg clone フォー！(古い)とかやらなくていいし抵抗なくて使えていいですね。&lt;/p&gt;

&lt;p&gt;なんかWikiとか課題(issue)とかも使えるし、どうやらGithubPagesみたいのもできるみたい。
なんかTrelloともなんか連携できるみたいでいいですね。&lt;/p&gt;

&lt;p&gt;使いこなせる自信ないけどPipelineてのもあるらしい。&lt;/p&gt;

&lt;p&gt;Githubとの使い分けがなやましいけど、とりあえずはプライベートにしたいものは基本Bitbucketにしよう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>アジャイルでスプリントな感じで</title>
      <link>http://tech.k-zak.com/2017/03/21/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E3%81%A7%E3%82%B9%E3%83%97%E3%83%AA%E3%83%B3%E3%83%88%E3%81%AA%E6%84%9F%E3%81%98%E3%81%A7</link>
      <pubDate>Tue, 21 Mar 2017 23:52:11 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/03/21/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E3%81%A7%E3%82%B9%E3%83%97%E3%83%AA%E3%83%B3%E3%83%88%E3%81%AA%E6%84%9F%E3%81%98%E3%81%A7</guid>
      <description>

&lt;h1 id=&#34;自分の目標をアジャイルにスプリントな感じで少しずつ達成していきたい&#34;&gt;自分の目標をアジャイルにスプリントな感じで少しずつ達成していきたい&lt;/h1&gt;

&lt;p&gt;と、言うことです。&lt;/p&gt;

&lt;p&gt;覚えたいこと、挑戦したいことを目標とするはいいけど、いつまでたっても着手しなかったり遅々として進まなかったりするので優先順位をつけて期限を設けて手中して取り組んでいけば少しは結果が変わってくると信じたい。&lt;/p&gt;

&lt;h2 id=&#34;現在の目標&#34;&gt;現在の目標&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ブログや静的サイトのテーマをつくり込みたい(Pelican,Hexo,Jekyll,WordPress,Hugo,Sphinx)&lt;/li&gt;
&lt;li&gt;AWSの機能のだいたいを触って感覚を掴んでおきたい&lt;/li&gt;
&lt;li&gt;Microsoft Azureを触ってAWSとの違いを掴んでおきたい&lt;/li&gt;
&lt;li&gt;GCC？を以下略&lt;/li&gt;
&lt;li&gt;Blumixに挑戦したい&lt;/li&gt;
&lt;li&gt;FreeBSDを構築したい&lt;/li&gt;
&lt;li&gt;Alpineを構築して慣れたい&lt;/li&gt;
&lt;li&gt;Ansibleを一通り触っていろいろできるよういなりたい&lt;/li&gt;
&lt;li&gt;Dockerをある程度使えるようになりたい&lt;/li&gt;
&lt;li&gt;IPv6の学習と擬似ネットワークの構築してみたい&lt;/li&gt;
&lt;li&gt;VPNの設定をGUIじゃなくても設定できるようになりたい&lt;/li&gt;
&lt;li&gt;VyOS？を試してみたい&lt;/li&gt;
&lt;li&gt;Shell及びAWKを覚えたい&lt;/li&gt;
&lt;li&gt;Powershellを覚えたい&lt;/li&gt;
&lt;li&gt;dot net C#を覚えたい&lt;/li&gt;
&lt;li&gt;Javaを覚えたい&lt;/li&gt;
&lt;li&gt;Androidを覚えたい&lt;/li&gt;
&lt;li&gt;Swiftを覚えたい&lt;/li&gt;
&lt;li&gt;JavaScriptをもっと使いこなせるようになりmたい&lt;/li&gt;
&lt;li&gt;Perl6/Perl5を使えるようになりたい&lt;/li&gt;
&lt;li&gt;PHP7を覚えたい&lt;/li&gt;
&lt;li&gt;PHPのフレームワーク、Laravelを覚えたい&lt;/li&gt;
&lt;li&gt;Nginxに組み込むLuaを少し試したい&lt;/li&gt;
&lt;li&gt;Ruby/Railsを覚えたい&lt;/li&gt;
&lt;li&gt;Python3をもう少し使えるようになりたい&lt;/li&gt;
&lt;li&gt;Scalaちょっと覚えたい&lt;/li&gt;
&lt;li&gt;Lispわかるようになりたい&lt;/li&gt;
&lt;li&gt;Clojure書けるようになりたい&lt;/li&gt;
&lt;li&gt;Haskell読めるようになりたい&lt;/li&gt;
&lt;li&gt;F#ちょっとしたものなら書けるようになりたい&lt;/li&gt;
&lt;li&gt;ActiveDirectory/OpenDirectoryがわかるようになりたい。&lt;/li&gt;
&lt;li&gt;Golang書けるようになりたい&lt;/li&gt;
&lt;li&gt;Makerel試したい&lt;/li&gt;
&lt;li&gt;Erlang読み書きできるようになりたい&lt;/li&gt;
&lt;li&gt;Elasticsearch扱えるようになりたい&lt;/li&gt;
&lt;li&gt;Neo4j試したい&lt;/li&gt;
&lt;li&gt;MongoDB試したい&lt;/li&gt;
&lt;li&gt;DynamoDB試したい&lt;/li&gt;
&lt;li&gt;Redis扱えるようになりたい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とっても曖昧なものが多い。。&lt;/p&gt;

&lt;h2 id=&#34;今もっとも取り組みたいことを多くて3つに絞るなら&#34;&gt;今もっとも取り組みたいことを多くて3つに絞るなら&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;ブログや静的サイトのテーマをつくり込みたい(Pelican,Hexo,Jekyll,WordPress,Hugo,Sphinx)&lt;/li&gt;
&lt;li&gt;Makerel試したい&lt;/li&gt;
&lt;li&gt;Dockerをある程度使えるようになりたい&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以下、打ち消し戦のものは現時点で達成済みのもの&lt;/p&gt;

&lt;h3 id=&#34;1-ブログや静的サイトのテーマをつくり込みたい&#34;&gt;1. ブログや静的サイトのテーマをつくり込みたい&lt;/h3&gt;

&lt;p&gt;Pelican,Hexo,Jykell,WordPress,Hugo,Sphinxで動かし始めた静的サイトのテーマを一から作ってみたり、採用したテーマをカスタマイズしたりして見やすさやアクセスのしやすさを向上させる。&lt;/p&gt;

&lt;h4 id=&#34;目的&#34;&gt;目的&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;各静的サイトジェネレータのテンプレートの書き方を覚える&lt;/li&gt;
&lt;li&gt;&lt;del&gt;レスポンシブレイアウトを一から作ってみてカラダで覚える&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;GoogleAnalyticsやアフィリエイトコードの埋め込み等を試す&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;達成条件-5月上旬までに&#34;&gt;達成条件:5月上旬までに&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;ベースとなるレスポンシブレイアウトを作成する&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Pelican用のテーマを一から作成する(jinja2)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Hexoで採用したテーマを見直し改良する(ejs)&lt;/li&gt;
&lt;li&gt;WordPressのテーマを一から作成し、よく使いそうな関数のチーとシート的なものを作成する(PHP)&lt;/li&gt;
&lt;li&gt;Jekyllのテーマを一から作成してjinjaとの違いを体感する。(?)&lt;/li&gt;
&lt;li&gt;Sphinxのテーマを改良し、Pelicanとの勝手の違いを体験する(多分jinja2)&lt;/li&gt;
&lt;li&gt;Hugoのテーマを改良してgokanぽさを体験する(?)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;派生目標-別途達成条件や時期を検討する&#34;&gt;派生目標:別途達成条件や時期を検討する&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;GithubPagesを試す&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Bitbucketを試す&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Fabric/Capistranoを試す&lt;/li&gt;
&lt;li&gt;Jenkinsを試す。コミットからのS3もしくはWebサイトへのプッシュができないか検討する&lt;/li&gt;
&lt;li&gt;コードをプッシュではなく、Dockerコンテナをプッシュする方法を試す&lt;/li&gt;
&lt;li&gt;S3のhttps化&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-makerel試したい&#34;&gt;2. Makerel試したい&lt;/h3&gt;

&lt;p&gt;MBPにステッカーを貼ってしまったので、なんちゃってでも使って試す。&lt;/p&gt;

&lt;h4 id=&#34;目的-1&#34;&gt;目的&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;ツールとしての勝手をつかむ&lt;/li&gt;
&lt;li&gt;Linuxでの使い方、Windowsでの使い方を覚える&lt;/li&gt;
&lt;li&gt;プラグインの使い方を覚える&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;達成条件-3月中&#34;&gt;達成条件:3月中&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Linuxにインストール&lt;/li&gt;
&lt;li&gt;Windowsにインストール&lt;/li&gt;
&lt;li&gt;かんたんなプラグインを作成してみる(車輪の再発明でよい)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-dockerをある程度使えるようになりたい&#34;&gt;3. Dockerをある程度使えるようになりたい&lt;/h3&gt;

&lt;h4 id=&#34;目的-2&#34;&gt;目的&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;DockerSwarmを試して勝手を掴む&lt;/li&gt;
&lt;li&gt;Kubernatesを試して勝手を掴む&lt;/li&gt;
&lt;li&gt;Dockerコンテナマネージドサービスを利用して買ってをつかむ&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;達成条件-3月中-1&#34;&gt;達成条件:3月中&lt;/h4&gt;

&lt;p&gt;何種類かのdocker composeを作成する
VagrantもしくはEC2上でdocker swarmを試す
VagrantもしくはEC2上でKubernatesを試す
AWS/GCP/Azure/Blumix上でマネージドなコンテナサービスを試す&lt;/p&gt;

&lt;h2 id=&#34;なぜスプリント&#34;&gt;なぜスプリント？&lt;/h2&gt;

&lt;p&gt;おそらく、目標が雑多で曖昧なのと、こういった勉強や訓練？に真面目に割ける時間がもう少ないと考えているので、限られた時間の中で自分の人生の中で時間対効果が高そうなものから絞って集中して取り組むことで成果を上げやすくしていこうと考えています。&lt;/p&gt;

&lt;p&gt;あれもこれもじゃなくて、これだけ。これだけ。って絞って集中して残り少ない人生を進んでいこうと考えています。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pelicanのレイアウト作成</title>
      <link>http://tech.k-zak.com/2017/03/20/create-pelican-theme</link>
      <pubDate>Mon, 20 Mar 2017 18:26:58 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/03/20/create-pelican-theme</guid>
      <description>

&lt;h1 id=&#34;pelicanで使う自分用テーマを作成した&#34;&gt;Pelicanで使う自分用テーマを作成した&lt;/h1&gt;

&lt;p&gt;静的サイトジェネレーター用の基本的なブログレイアウトを一つ作っておくと使い回しができると思い、Python製のPelicanから着手することにしてみた。&lt;/p&gt;

&lt;p&gt;結論から言うと、なかなか時間がとれないのもあって、足掛け2ヶ月かかった。&lt;/p&gt;

&lt;h2 id=&#34;その1-ベースとなるレイアウトを素組する&#34;&gt;その1：ベースとなるレイアウトを素組する&lt;/h2&gt;

&lt;p&gt;htmlとCSSのみでできるだけレスポンシブな簡易ブログ用のレイアウトを考えて作った。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sakadonohito/site-base-theme&#34;&gt;https://github.com/sakadonohito/site-base-theme&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;flexboxを中途半端に使っているのと、Pelicanテーマ作り終わってからフィードバックしている部分もある。ホント適当。&lt;/p&gt;

&lt;p&gt;CSSはSCSSからWebpackでビルドしているけど、限りなく必要ないレベル。
EmacsならSCSS保存する時にCSSをビルドしてくれるのでホント不要な構造、しかも作り終わる前にWebpackは2がでちゃってバージョンが古いというオマケつき。
そうです、Webpack使ってるぜアッピルがしたかっただけなのです。&lt;/p&gt;

&lt;h2 id=&#34;その2-pelicanのテーマを作る&#34;&gt;その2：Pelicanのテーマを作る&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;ググって出てきたシンプルなテーマをコピーして&lt;/li&gt;
&lt;li&gt;作ったベースレイアウトにまるっと取り替えて&lt;/li&gt;
&lt;li&gt;変数部分がちゃんと展開されるように調整して&lt;/li&gt;
&lt;li&gt;パーツをバラす&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;みたいな感じで作成。&lt;/p&gt;

&lt;p&gt;結局よくりようしたのは&lt;a href=&#34;http://docs.getpelican.com/en/3.6.3/themes.html&#34;&gt;公式ドキュメント&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ハマったところ&#34;&gt;ハマったところ&lt;/h2&gt;

&lt;h3 id=&#34;1-見本にしたテーマのパーツ毎の役割がよくわからなかった&#34;&gt;1. 見本にしたテーマのパーツ毎の役割がよくわからなかった&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;categories.html&lt;/code&gt;と&lt;code&gt;category.html&lt;/code&gt;ってあって、最初複数形のはカテゴリ別の一覧表示で単数系のは1記事のパーツかと思ったら、複数形はカテゴリ名の一覧で単数系が特定のカテゴリでの記事一覧だった。
タグの場合はさらに1記事用パーツレイアウトにはめ込む用の記事に関連づいたタグを横一列に並べるtaglist.htmlなんてのもあって、さらに混乱した。&lt;/p&gt;

&lt;h3 id=&#34;2-ビルド失敗した時どこでエラーが発生したのか分からない&#34;&gt;2. ビルド失敗した時どこでエラーが発生したのか分からない&lt;/h3&gt;

&lt;p&gt;ビルドのエラーログの出力設定があるのか調べていないだけなんだけど、テンプレート作成している時にビルドエラー発生したけど、どこの編集のせいか分からない(1行文法エラーで失敗したぜ！的なメッセージがでるだけ)のでこまめにビルドして確認しながらじゃないと迷路に迷い込む。&lt;/p&gt;

&lt;p&gt;ショートカットキーのタイポとかで変な場所に意図せず文字を入力してしまっているのに気づかず、ビルドが失敗した時には、身に覚えがなかったので解決に時間がかかった(2分探索みたいにコードを消したり戻したりしながらビルドしてエラー箇所を探した)。&lt;/p&gt;

&lt;h3 id=&#34;3-記事データのリストオブジェクトは生成するページのコンテキストに依存するものがある&#34;&gt;3. 記事データのリストオブジェクトは生成するページのコンテキストに依存するものがある&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;period_Archives.html&lt;/code&gt;っていう特定の期間の記事リストを表示するためのパーツの上で&lt;strong&gt;articles&lt;/strong&gt;という記事リストオブジェクトは全体じゃなくて、その期間の記事リストオブジェクト。全記事のリストは代わりに&lt;strong&gt;all_articles&lt;/strong&gt;てのある。じゃぁ常に&lt;strong&gt;all_articles&lt;/strong&gt;を使えば？ってなるんだけど、TOPとか他の場所だとこの&lt;strong&gt;all_articles&lt;/strong&gt;は空欄。&lt;/p&gt;

&lt;h3 id=&#34;4-年月毎に記事のカウントを取ったりurl分ける方法の説明がおろそか&#34;&gt;4. 年月毎に記事のカウントを取ったりURL分ける方法の説明がおろそか&lt;/h3&gt;

&lt;p&gt;結論からいうと、URLについては設定ファイルに&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;MONTH_ARCHIVE_SAVE_AS = &#39;{date:%Y}/{date:%m}/index.html&#39;
他にも
AUTHOR_SAVE_AS とか
PAGE_SAVE_AS なんかもあるのよ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とか書いておくと、/2017/03/みたいなパスで2017年3月の記事の一覧ページが生成される。今にして思うと年のフォルダ&amp;amp;月を意味するファイルの組み合わせでよかったんじゃないか説もある。&lt;/p&gt;

&lt;p&gt;年月の記事カウントについては全記事を年でまとめた記事リストの記事リストを作成して「記事リスト」をさらに月でまとめてカウントを取るみたいなことをやる。
これはそんなようなことをするサンプルのテーマがたまたま見つかったから作れたけど見つからなかったらアーカイブのページが断念したと思う。&lt;/p&gt;

&lt;p&gt;こんな感じ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;section&amp;gt;
	&amp;lt;p&amp;gt;Archives&amp;lt;/p&amp;gt;
	{% if all_articles|count %}
	&amp;lt;ul&amp;gt;
		{% for year, date_year in all_articles|groupby(&#39;date.year&#39;)|sort(reverse=NEWEST_FIRST_ARCHIVES) %}
		　　{% for month, articles in date_year|groupby(&#39;date.month&#39;)|sort(reverse=NEWEST_FIRST_ARCHIVES) %}
		　　　　&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/{{ year }}/{{ &#39;%02d&#39; % month }}/&amp;quot;&amp;gt;{{ year }}年{{ month }}月&amp;lt;/a&amp;gt;({{ articles|count }})&amp;lt;/li&amp;gt;
		　　{% endfor %}
		{% endfor %}
	&amp;lt;/ul&amp;gt;
	{% elif articles %}
	&amp;lt;ul&amp;gt;
	{% for year, date_year in articles|groupby(&#39;date.year&#39;)|sort(reverse=NEWEST_FIRST_ARCHIVES) %}
	　　{% for month, articles in date_year|groupby(&#39;date.month&#39;)|sort(reverse=NEWEST_FIRST_ARCHIVES) %}
		　　　　&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/{{ year }}/{{ &#39;%02d&#39; % month }}/&amp;quot;&amp;gt;{{ year }}年{{ month }}月&amp;lt;/a&amp;gt;({{ articles|count }})&amp;lt;/li&amp;gt;
	　　{% endfor %}
	{% endfor %}
	&amp;lt;/ul&amp;gt;
	{% endif %}
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正直リストオブジェクトをパイプで次の処理に渡せるのjinjaのドキュメント見なかったら想像もできなかったので、このパターンのサンプルくらいPelicanのドキュメントにも載せておいてほしい。&lt;/p&gt;

&lt;h3 id=&#34;5-1つのテンプレートファイルに複数のブロックを書ける&#34;&gt;5. 1つのテンプレートファイルに複数のブロックを書ける&lt;/h3&gt;

&lt;p&gt;ハマったことではないんだけど、パーツ側が1ブロックしか書いちゃいけないと最初思ってたので。
複数のブロックを書けるので、メインコンテンツのブロックとは別の離れた場所に共通化できないテンプレートごとの何かを表示させたい要素がある時なんかに便利だなーと思った。&lt;/p&gt;

&lt;h2 id=&#34;総括&#34;&gt;総括&lt;/h2&gt;

&lt;p&gt;テンプレート作成したけど設計失敗かも。&lt;/p&gt;

&lt;p&gt;今回作成したPelicanのテーマ&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sakadonohito/pelican-theme-simple&#34;&gt;https://github.com/sakadonohito/pelican-theme-simple&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pelicanを試す</title>
      <link>http://tech.k-zak.com/2017/02/20/first-pelican</link>
      <pubDate>Mon, 20 Feb 2017 15:26:44 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/02/20/first-pelican</guid>
      <description>

&lt;h1 id=&#34;python製の静的サイトジェネレーターpelicanを試す&#34;&gt;Python製の静的サイトジェネレーターPelicanを試す&lt;/h1&gt;

&lt;p&gt;Hugo,Hexo,Jekyllと試してきて、せっかくなのでPython製のものも試そうとPelicanを試した。&lt;/p&gt;

&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;mkdir &amp;lt;&amp;lt;blog&amp;gt;&amp;gt;
cd &amp;lt;&amp;lt;blog&amp;gt;&amp;gt;
pip install pelican Markdown
pelican-quickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんかいろいろ聞かれるので適当に答える。今回はS3にFTPで物理コピーをする運用のため、デプロイに関する質問は全てNo。&lt;/p&gt;

&lt;h2 id=&#34;記事を書く&#34;&gt;記事を書く&lt;/h2&gt;

&lt;p&gt;記事はcontent以下にreStructuredTextもしくはMarkdownで書きます。
content以下にディレクトリを配置するとそのディレクトリ名がカテゴリ名扱いされるらしい。当分はいいや。
もちろん、カテゴリはテキストファイルないのヘッダー？に記述できますので、カテゴリが必要だからといってディレクトリでわかなければいけないわけではありません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pelican content -s pelicanconf.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でoutputディレクトリに静的ファイルが生成されます。&lt;/p&gt;

&lt;p&gt;簡単ですな。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jekyllを試す</title>
      <link>http://tech.k-zak.com/2017/02/19/first-jekyll</link>
      <pubDate>Sun, 19 Feb 2017 23:22:39 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/02/19/first-jekyll</guid>
      <description>

&lt;h1 id=&#34;jekyllを試す&#34;&gt;Jekyllを試す&lt;/h1&gt;

&lt;p&gt;Ruby製の静的サイトジェネレーターを試してる。&lt;/p&gt;

&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;以下下記URLを参考にいろいろ試したけど、情報が古くコマンドが変わってた。
&lt;a href=&#34;http://melborne.github.io/2012/05/13/first-step-of-jekyll/&#34;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install jekyll
mkdir _site _posts _site assets
mkdir -p assets/css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;構造はこんな感じ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├── _config.yml
├── _layouts
│   ├── layout.html
│   └── post.html
├── _posts
├── _site
├── assets
│   └── css
└── index.md
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;jekyll serve --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で編集内容が即時される。&lt;/p&gt;

&lt;p&gt;こんな感じでやっていこうと思います。&lt;/p&gt;

&lt;p&gt;レイアウトがとてもダサイ感じなので、テーマをちゃんと作っていきたい。&lt;/p&gt;

&lt;p&gt;Ruby製だから？ヘルプが分かりやすい。&lt;/p&gt;

&lt;p&gt;静的ファイルを生成したい場合は&lt;code&gt;jekyll build&lt;/code&gt;で_siteディレクトリに生成される。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hexoを試す</title>
      <link>http://tech.k-zak.com/2017/02/19/first-hexo</link>
      <pubDate>Sun, 19 Feb 2017 22:21:50 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/02/19/first-hexo</guid>
      <description>

&lt;h1 id=&#34;javascriptの静的サイトジェネレーターhexoを試す&#34;&gt;JavaScriptの静的サイトジェネレーターHexoを試す&lt;/h1&gt;

&lt;p&gt;JavaScript(Node.js)ベースの静的サイトジェネレーターを試してみようと思った。&lt;/p&gt;

&lt;h2 id=&#34;インストールと初期設定&#34;&gt;インストールと初期設定&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;npm install -g hexo-cli
hexo init &amp;lt;&amp;lt;blog-name&amp;gt;&amp;gt;
cd &amp;lt;&amp;lt;blog-name&amp;gt;&amp;gt;
npm install
hexo server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでHexoがインストールされサイトを開始できる
&lt;code&gt;hexe server&lt;/code&gt;で開発用のサーバー起動状態になり&lt;code&gt;http://localhost:4000&lt;/code&gt;にアクセスできる。&lt;/p&gt;

&lt;p&gt;_config.ymlを編集する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;title: &amp;quot;サイトタイトル&amp;quot;
subtitle: &amp;quot;サブタイトル&amp;quot;
description: &amp;quot;サイトの説明&amp;quot;
author: &amp;lt;&amp;lt;author&amp;gt;&amp;gt;
language: ja
timezone: Asia/Tokyo

url: http://&amp;lt;&amp;lt;site-domain&amp;gt;&amp;gt;
root: /
permalink: :year/:month/:day/:title/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;languageは&lt;code&gt;ja&lt;/code&gt;にしてtimezoneは&lt;code&gt;Asia/Tokyo&lt;/code&gt;にした。
urlは公開したいドメイン、rootはトップレベルにした。&lt;/p&gt;

&lt;p&gt;permalinkの設定は&lt;code&gt;:year/:month/:day/:title/&lt;/code&gt;のデフォルト設定のままにした。&lt;/p&gt;

&lt;h2 id=&#34;記事の追加&#34;&gt;記事の追加&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;hexo new &amp;lt;&amp;lt;post-name&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでHugoみたいに初期状態のができる。
このあたり、Hugoと同じ感じで出来るので入りやすい。&lt;/p&gt;

&lt;p&gt;当初、React製の「gatsby」にしようかと思ったけど、なんか違うと思ったので、止めた。&lt;/p&gt;

&lt;h2 id=&#34;publicファイルの生成&#34;&gt;Publicファイルの生成&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;hexo generate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでファイルがpublicフォルダに出力されるので、後は目的の場所にアップロードするだけ。&lt;/p&gt;

&lt;p&gt;今回はここまで。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WordPressからHugoへ移行</title>
      <link>http://tech.k-zak.com/2017/02/19/first-hugo</link>
      <pubDate>Sun, 19 Feb 2017 00:09:41 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/02/19/first-hugo</guid>
      <description>

&lt;h2 id=&#34;開発メモブログをwordpressからhugoへの移行&#34;&gt;開発メモブログをWordPressからHugoへの移行&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;WordPressから記事をエクスポート&lt;/li&gt;
&lt;li&gt;Hugoをインストール&lt;/li&gt;
&lt;li&gt;エクスポートした記事を放り込む&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;wordpressから記事をエクスポート&#34;&gt;WordPressから記事をエクスポート&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;WordPressにHugo向けにエクスポートするプラグインを入れてデータを出す

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mano.xyz/post/2015-09-25-migration-to-hugo-from-wordpress/&#34;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hugoをインストール&#34;&gt;Hugoをインストール&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;brew install hugo
hugo new site techblog
cd  techblog
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;書き出した記事を放り込む&#34;&gt;書き出した記事を放り込む&lt;/h2&gt;

&lt;p&gt;プラグインを使ってエクスポートした記事データはHugoの&lt;code&gt;content/post&lt;/code&gt;のpostディレクトリ相当のものが吐き出されているので、中身を&lt;code&gt;content/post/&lt;/code&gt;にぶちまける。&lt;/p&gt;

&lt;h2 id=&#34;細かい設定&#34;&gt;細かい設定&lt;/h2&gt;

&lt;h3 id=&#34;テーマを入れる&#34;&gt;テーマを入れる&lt;/h3&gt;

&lt;p&gt;適当なテーマをインストール。今回はPolymer。
themeディレクトリがなかったら作ってその中で&lt;code&gt;git clone&lt;/code&gt;したらいいよ。&lt;/p&gt;

&lt;h3 id=&#34;config-tomlを編集&#34;&gt;config.tomlを編集&lt;/h3&gt;

&lt;p&gt;title,baseurl,languageCode,theme,paginateを修正する。&lt;/p&gt;

&lt;p&gt;後で独自ドメインでGitHubPagesで運用するため、canonifyurls = trueを設定する。&lt;/p&gt;

&lt;p&gt;GoogleAnalyticsのコードを入れるため、config.tomlに以下を追記&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[params]
  googleAnalyticsUserID = &amp;quot;&amp;lt;&amp;lt;code&amp;gt;&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;またURLの構造を検討する。
今回からパーマリンクを以下のようにした。permelink設定を追加&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[permalinks]
  post = &amp;quot;/:year/:month/:day/:slug&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでyyyy/mm/dd/slugというようなURLになる。&lt;/p&gt;

&lt;p&gt;URL構造を変更したため、取り込んだ記事のURL属性を消して代わりにSlug属性を追加。結構時間かかった。&lt;/p&gt;

&lt;p&gt;新しい記事を追加する時には&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/&amp;lt;&amp;lt;post-name&amp;gt;&amp;gt;.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で記事の初期状態のものが作られるので後は内容をMarkdownで記述していく。&lt;/p&gt;

&lt;h2 id=&#34;githubpagesで公開する&#34;&gt;GitHubPagesで公開する&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;GitHubにリポジトリを追加&lt;/li&gt;
&lt;li&gt;hugoコマンドで出力されるpublicディレクトリの静的ファイルをコミット&lt;/li&gt;
&lt;li&gt;settingsのGitHub Pagesの項にあるCustom domainにドメインを入れて保存。&lt;/li&gt;
&lt;li&gt;hugoのpublicにCNAMEというファイルを追加。内容は公開ドメイン名&lt;/li&gt;
&lt;li&gt;再度publicディレクトリの内容をコミット&lt;/li&gt;
&lt;li&gt;DNS(今回はRoute53)でCNAMEの設定をする。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;今回はひとまずこんな感じ。
今後は記事の追加だけじゃなく、テーマを自作していきたい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>再始動</title>
      <link>http://tech.k-zak.com/2017/02/18/restart</link>
      <pubDate>Sat, 18 Feb 2017 23:26:18 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/02/18/restart</guid>
      <description>

&lt;h1 id=&#34;ブログ引越して再始動&#34;&gt;ブログ引越して再始動&lt;/h1&gt;

&lt;p&gt;&amp;hellip;の予定&lt;/p&gt;

&lt;h2 id=&#34;再始動&#34;&gt;再始動&lt;/h2&gt;

&lt;p&gt;契約していたレンタルサーバーを解約して、長らく契約するも放置状態が続いていたVPSにいろいろ引っ越そうと検討。&lt;/p&gt;

&lt;p&gt;ついでにいろいろ構成などを再検討してやり直そうと考えました。&lt;/p&gt;

&lt;h2 id=&#34;構成&#34;&gt;構成&lt;/h2&gt;

&lt;p&gt;レンタルサーバー上のMovableTypeで細々と更新していたアニメやゲームについてのブログをVPS上にWordPressに構築し直しす事に。&lt;/p&gt;

&lt;p&gt;ついでにWordPressのカスタマイズの練習台にも使おうという魂胆。&lt;/p&gt;

&lt;p&gt;技術メモ的なこの忘備録ブログは今回を機にHugoで静的サイト構築してGithubPagesに載せる事にしました。&lt;/p&gt;

&lt;p&gt;他にいくつか静的サイトジェネレーターを運営していろいろ触ってみたいと考えている。&lt;/p&gt;

&lt;p&gt;ただ、今の所、上記２ブログ以外は全てS3での静的サイトホスティングでFTPでファイルをアップロードする方法を考えているけど、将来的には違う場所でホスティングしたりデプロイツールを使ったり、CI的なことをしたり、Dockerを使うなどして別の場所にサイトを構築しようかと考えている。&lt;/p&gt;

&lt;h2 id=&#34;movabletypeからwordpressへの引越し&#34;&gt;MovableTypeからWordPressへの引越し&lt;/h2&gt;

&lt;p&gt;テキストをずらずら記述していただけだったので、特に問題はなかった。
単純にエクスポートしてインポートしただけ。
インポート後にコツコツとカテゴリやタグを整理して付け直したり。&lt;/p&gt;

&lt;h2 id=&#34;vpsサーバーの設定やhugoについて&#34;&gt;VPSサーバーの設定やHugoについて&lt;/h2&gt;

&lt;p&gt;後日、それぞれ別の記事にします。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>嘘でしょう。。。</title>
      <link>http://tech.k-zak.com/2015/03/08/ubuntu-wifi</link>
      <pubDate>Sun, 08 Mar 2015 05:02:32 +0000</pubDate>
      
      <guid>http://tech.k-zak.com/2015/03/08/ubuntu-wifi</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://kazunoko.sakura.ne.jp/wordpress/wp-content/uploads/2009/10/chanmio.jpg&#34; rel=&#34;attachment wp-att-193&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-193&#34; src=&#34;http://kazunoko.sakura.ne.jp/wordpress/wp-content/uploads/2009/10/chanmio.jpg&#34; alt=&#34;chanmio&#34; width=&#34;128&#34; height=&#34;128&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;長い間悩まされていた問題が解決したかもしれないので、ここに書いておきましょう。&lt;/p&gt;

&lt;p&gt;実際に解決したかどうかは、会社と自宅とPocket-Wifiで何回かネットワークを切り替えてから。&lt;/p&gt;

&lt;h3 id=&#34;悩まされていた問題&#34;&gt;悩まされていた問題&lt;/h3&gt;

&lt;p&gt;会社やPocket-Wifiでは問題ないが、なぜか自宅のWifi環境だとMacのVM上のUbuntu(開発環境)のネットワークが繋がらなくなる。&lt;/p&gt;

&lt;p&gt;VMのネットワーク設定を「Macと共有」の時は問題なくて「自動検出」にするとVMのUbuntuのIPが正しく設定されない。&lt;/p&gt;

&lt;h3 id=&#34;ひとまず解決&#34;&gt;ひとまず解決？&lt;/h3&gt;

&lt;p&gt;前提として、このUbuntuはDesktop 14.04LTSです。なのでUbuntuServerの場合は違うかも。&lt;/p&gt;

&lt;p&gt;/etc/NetworkManager/system-connections/ 配下のネットワークの設定ファイルのファイル名に日本語(マルチバイト文字)が含まれていたので、ASCII文字のみに変更。&lt;/p&gt;

&lt;p&gt;/etc/NetworkManager/system-connections/ のファイル名を変更したものを開く&lt;/p&gt;

&lt;p&gt;この設定ファイルの中の「connection」にあるidの設定を変更したファイル名に合わせる。&lt;/p&gt;

&lt;p&gt;これだけでネットワークつながるようになった。というかipが正しくふられるようになった。&lt;/p&gt;

&lt;p&gt;まさかのマルチバイト文字ファイル名問題？&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>fmxj.js のサーバーサイドをPHPじゃなくてPerl(Mojolicious)で試す</title>
      <link>http://tech.k-zak.com/2015/02/16/challenge-fmxj</link>
      <pubDate>Mon, 16 Feb 2015 16:09:59 +0000</pubDate>
      
      <guid>http://tech.k-zak.com/2015/02/16/challenge-fmxj</guid>
      <description>&lt;p&gt;先日、SeedCodeの方がFileMakerのCustom Web Publishing の為のJavaScriptとServer side で使うPHPのサンプルをGithubで公開されてました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/seedcode/fmxj&#34;&gt;https://github.com/seedcode/fmxj&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;概要としては、FileMaker Server の XML公開を使う。&lt;/p&gt;

&lt;p&gt;Web公開エンジンにXML公開のためのリクエストをJavaScriptで生成してサーバーサイドスクリプト(SeedCodeのサンプルではPHP)にpostする。&lt;/p&gt;

&lt;p&gt;◆ハマった事：サンプルPHPの内容&lt;/p&gt;

&lt;p&gt;サンプルのPHPをよく読んでなかった。。。&lt;/p&gt;

&lt;p&gt;JavaScriptからFileMakerのユーザーアカウントとパスワードをpost出来るようにキーバリューを元々のpostデータに加えている。それから本来のpostデータからおまけを除くための追加分のパラメータ文字数もpostに加えている。この辺りの仕様にもんりょりする。&lt;/p&gt;

&lt;p&gt;-db=dbname&amp;amp;-lay=layname&amp;amp;-query=(q1)&amp;amp;-q1=Status&amp;amp;-q1.value=Vendor&amp;amp;-findquery みたいな通常のクエリデータに&lt;/p&gt;

&lt;p&gt;u=undefined&amp;amp;p=undefined&amp;amp;l=コンテンツの文字数&lt;/p&gt;

&lt;p&gt;ていうのがくっついてPHPにpostされてくる。&lt;/p&gt;

&lt;p&gt;それをPHP側でphp://inputでリクエストのボディを取得して余計なパラメータを削ってpostデータを作り直してcurl使ってPOSTしてた。&lt;/p&gt;

&lt;p&gt;そこに気づかずperlで再現しようとした時にpostデータを丸投げしてエラーになってしまっていた。&lt;/p&gt;

&lt;p&gt;なんでpostデータをわざわざこねくり回してるんだろう？て思ってた。&lt;/p&gt;

&lt;p&gt;サンプルって事でいろいろハードコーディングされてるけど、気にしない。&lt;/p&gt;

&lt;p&gt;◆ハマった：Nginxの設定&lt;/p&gt;

&lt;p&gt;欲をかいてPerlでサーバーサイド書くにあたって、FastCGIでさらっと書くじゃなくてMojolicious使うことにしたら&lt;/p&gt;

&lt;p&gt;WebServer→Nginxでバーチャルホスト(hoge.sample.comみたいな)とmorboで127.0.0.1:3000で動くMojoliciousになって、何が起きたかって言うとクロスドメインの問題が発生してしまい、エラーになる。&lt;/p&gt;

&lt;p&gt;これについてはNginxの設定でproxy_passでMojoliciousにリクエストがリバースプロキシされるようにして解決。&lt;/p&gt;

&lt;p&gt;しかしNginx、デフォルトではContent-Typeの書き換えができず、JavaScriptにレスポンスされるデータがXMLになっていなくて、意図する結果に終わらない。既にあるヘッダーに値を追加する処理を行ってしまう。&lt;/p&gt;

&lt;p&gt;※Nginxで add_header Content-Type &amp;#8216;application/xml&amp;#8217;してもmime-typeの設定ファイルに追記しても&lt;/p&gt;

&lt;p&gt;　Content-Type text/html;charset=UTF-8に application/xmlの値が追記されるだけになる。&lt;/p&gt;

&lt;p&gt;その結果、fmxj.jsがXMLHttpRequestのresponseXMLに値がセットされない。そしてresponseXMLがあるの前提になっているXMLをパースする処理のところで結果が空欄になって処理が終わってしまう。&lt;/p&gt;

&lt;p&gt;最初fmxj.js内部を書き換えて(responseTextをXMLに変換して)みたんだけど、コアのライブラリを触るのはよくないので、Nginxでちゃんとヘッダを書き換えられる方法を調べる、nginx-extrasを追加でインストールするとmore-set-headerというのが使えるようになり、ヘッダーの書き換えができるようになるとの事だったのでインストール。&lt;/p&gt;

&lt;p&gt;自分はUbuntuの環境なので、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo apt-get install nginx-extras&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;後はNginxの設定ファイルに(厳密に言うとリクエストを受け付けるLocationディレクティブで)&lt;/p&gt;

&lt;p&gt;more_set_headers &amp;#8216;Content-Type: application/xml; charset=UTF8&amp;#8217;;&lt;/p&gt;

&lt;p&gt;を追記、more&amp;#8230;がヘッダーの追記ではなく書き換えなのでcharsetも忘れずに書く！&lt;/p&gt;

&lt;p&gt;これでようやく、Sample.html → fmxj.jsを使ってServerにpostリクエスト → 受けたリクエストをNginxがMojoliciousを動かしてるmorboにリバースプロキシ → MojoliciousがPOSTリクエスト受け取りXML公開のクエリパラメータ付きURLを生成して(生成しなおして)cURLをラップしたライブラリからPOST送信 → JavaScriptにレスポンスが返り、完成。&lt;/p&gt;

&lt;p&gt;いろいろとしょーもないミスを沢山した。CGIでサクッと試すだけにしておけば今頃はPythonもRubyも試せてかもしれないのに、残念でした。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AnsibleのSSH設定について</title>
      <link>http://tech.k-zak.com/2015/02/08/ansible-ssh</link>
      <pubDate>Sun, 08 Feb 2015 14:43:15 +0000</pubDate>
      
      <guid>http://tech.k-zak.com/2015/02/08/ansible-ssh</guid>
      <description>&lt;p&gt;Ansibleがバージョンを上げた所為か今までのやり方だとSSHのコネクションエラーになるようになって、どうも&amp;#8211;ask-pass の引数付きにするとパスワードいれて処理ができる事はわかったんだけど、スマートじゃない。&lt;/p&gt;

&lt;p&gt;という事で調べた。&lt;/p&gt;

&lt;p&gt;結論としては、varsファイルに&lt;/p&gt;

&lt;p&gt;・ansible_ssh_user&lt;/p&gt;

&lt;p&gt;・ansible_ssh_pass&lt;/p&gt;

&lt;p&gt;・ansible_sudo_pass&lt;/p&gt;

&lt;p&gt;の3つを書いておきましょう。でした。&lt;/p&gt;

&lt;p&gt;最初に呼び出すsite.yml内で変数定義してもいいんだけど、group_varsディレクトリ内にhostsファイルで書くグループ名のyamlに書くのがいいかなって思う。&lt;/p&gt;

&lt;p&gt;例えばhostsファイルに&lt;/p&gt;

&lt;p&gt;`Ansibleがバージョンを上げた所為か今までのやり方だとSSHのコネクションエラーになるようになって、どうも&amp;#8211;ask-pass の引数付きにするとパスワードいれて処理ができる事はわかったんだけど、スマートじゃない。&lt;/p&gt;

&lt;p&gt;という事で調べた。&lt;/p&gt;

&lt;p&gt;結論としては、varsファイルに&lt;/p&gt;

&lt;p&gt;・ansible_ssh_user&lt;/p&gt;

&lt;p&gt;・ansible_ssh_pass&lt;/p&gt;

&lt;p&gt;・ansible_sudo_pass&lt;/p&gt;

&lt;p&gt;の3つを書いておきましょう。でした。&lt;/p&gt;

&lt;p&gt;最初に呼び出すsite.yml内で変数定義してもいいんだけど、group_varsディレクトリ内にhostsファイルで書くグループ名のyamlに書くのがいいかなって思う。&lt;/p&gt;

&lt;p&gt;例えばhostsファイルに&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;とか書いてグループ名が「dev」の場合に&lt;/p&gt;

&lt;p&gt;-playbook&lt;/p&gt;

&lt;p&gt;|&lt;/p&gt;

&lt;p&gt;|&amp;#8211;dev.yml&lt;/p&gt;

&lt;p&gt;|&lt;/p&gt;

&lt;p&gt;|&amp;#8211;group_vars&lt;/p&gt;

&lt;p&gt;|   |&lt;/p&gt;

&lt;p&gt;|   |&amp;#8211;dev.yml&lt;/p&gt;

&lt;p&gt;|&lt;/p&gt;

&lt;p&gt;|&amp;#8211;roles\※内容略&lt;/p&gt;

&lt;p&gt;|&lt;/p&gt;

&lt;p&gt;|&amp;#8211;site.yml&lt;/p&gt;

&lt;p&gt;みたいな感じで書く。&lt;/p&gt;

&lt;p&gt;group_varsのdev.ymlには上記のようなansible_xxx_xxxを変数定義しておくとグループに対してssh接続の時に定義された値が使われる。これにより&amp;#8211;ask-passの指定が必要なくなった。&lt;/p&gt;

&lt;p&gt;問題は1つあって、group_varsのdev.ymlは公開したくない場合多いよねって事。&lt;/p&gt;

&lt;p&gt;なので更に、ここでいうdev.ymlはansible-vaultコマンドを使って暗号化する。もしくはバージョン管理に含めない運用を行うって事が必要になる。暗号化する場合も復号に使うキー？　ソルトみたいなもん？を書いたファイルを作る必要があって、それがないと暗号と復号ができないんだけど、そのファイルをバージョン管理に含めないって運用にするなら、最初からdev.ymlを含めないでも一緒かなって思う。&lt;/p&gt;

&lt;p&gt;ansible-playbookを実行する時に復号のために&amp;#8211;vault-passの引数とそのファイルパスを渡さないといけないってのも&amp;#8211;ask-pass使うのと大差ないじゃんってなるから暗号化は必要な案件だけでいいかな。&lt;/p&gt;

&lt;p&gt;hostsファイルにhostの後に引数オプション的にansible_ssh_passとか書けばいいのだけれども、それもなんだかなー&lt;/p&gt;

&lt;p&gt;って事で、今後はgroup_varsもしくはglobalに認識されるような変数を定義するファイルにssh接続情報は書こうかと考えている。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu14.04 でphpでメール受信とか</title>
      <link>http://tech.k-zak.com/2015/02/01/php-mail</link>
      <pubDate>Sun, 01 Feb 2015 14:51:57 +0000</pubDate>
      
      <guid>http://tech.k-zak.com/2015/02/01/php-mail</guid>
      <description>&lt;p&gt;## install postfix&lt;/p&gt;

&lt;p&gt;&amp;#8220;`&lt;/p&gt;

&lt;p&gt;sudo apt-get install postfix postfix-dev sasl2-bin&lt;/p&gt;

&lt;p&gt;sudo apt-get install dovecot-core dovecot-dev dovecot-pop3d dovecot-imapd dovecot-gssapt&lt;/p&gt;

&lt;p&gt;&amp;#8220;`&lt;/p&gt;

&lt;p&gt;## Settings&lt;/p&gt;

&lt;p&gt;&amp;#8220;`&lt;/p&gt;

&lt;p&gt;sudo cp /usr/lib/postfix/main.cf /etc/postfix/main.cf&lt;/p&gt;

&lt;p&gt;sudo emacs -nw /etc/postfix/main.cf&lt;/p&gt;

&lt;p&gt;&amp;#8220;`&lt;/p&gt;

&lt;p&gt;### 参考&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://www.server-world.info/query?os=Ubuntu_14.04&amp;amp;p=mail&#34;&gt;http://www.server-world.info/query?os=Ubuntu_14.04&amp;amp;p=mail&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://www.server-world.info/query?os=Ubuntu_14.04&amp;amp;p=mail&amp;amp;f=2&#34;&gt;http://www.server-world.info/query?os=Ubuntu_14.04&amp;amp;p=mail&amp;amp;f=2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;### gmailに転送する設定に変更&lt;/p&gt;

&lt;p&gt;relayhostにgmailを指定&lt;/p&gt;

&lt;p&gt;パスワードの設定とかね。&lt;/p&gt;

&lt;p&gt;## phpでメールを受信出来るよう設定&lt;/p&gt;

&lt;p&gt;メールサーバ受信DNS設定とか面倒だからやめた。&lt;/p&gt;

&lt;p&gt;phpinfoを見ると案の定imap入ってませんでしたので、php5.5系の落としてきてimapのディレクトリ移動してphpize&lt;/p&gt;

&lt;p&gt;### configureで失敗する&lt;/p&gt;

&lt;p&gt;configureしたらutf8_mime2text()がうんたらと出てきた。&lt;/p&gt;

&lt;p&gt;ググると、どうもphpにimapとかメール関係入れる時にライブラリが足りないと出るエラーのようだ。&lt;/p&gt;

&lt;p&gt;sudo apt-cache search libc-client&lt;/p&gt;

&lt;p&gt;→libc-client2007e libc-client2007e-dev てのが出てくるので両方インストール&lt;/p&gt;

&lt;p&gt;### imapうまく動かない？&lt;/p&gt;

&lt;p&gt;この後無事imapインストールできたけどなぜか受信出来ない。いろいろ調べて片っ端からSSL関連インストールしたけどうまくいかない。&lt;/p&gt;

&lt;p&gt;### 何が原因だったのか不明&lt;/p&gt;

&lt;p&gt;結局、何かのSSL関係のライブラリインストールが最初足りなくてGmail受信失敗してた。&lt;/p&gt;

&lt;p&gt;gmailからさくらのレンサバのメールアカウントで試した場合はアカウント名の指定を間違えてた。&lt;/p&gt;

&lt;p&gt;テストで受信するだけだから、普通のimapアカウントの場合はnotlsをflagにつける。&lt;/p&gt;

&lt;p&gt;gmailの場合は/ssl/novalidation-certみたいのつける&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu14.04 LTS でNginx FasCGI Perl</title>
      <link>http://tech.k-zak.com/2015/01/05/perl-cgi</link>
      <pubDate>Mon, 05 Jan 2015 15:51:41 +0000</pubDate>
      
      <guid>http://tech.k-zak.com/2015/01/05/perl-cgi</guid>
      <description>&lt;p&gt;古いPerlのサンプルを参考に復習したくなって、やむなく自分の開発環境にFastCGI環境をセットアップ&lt;/p&gt;

&lt;p&gt;最初、コードが間違っているのに気づかず3日ほどあれこれ調べまわっても解決せず時間を浪費した。&lt;/p&gt;

&lt;p&gt;502 bad gatewayのエラーでて、ログを見ると Cannot execute script って出てて、調べても分からんし、権限は間違ってるはず無いしでずっとつまずいてた。&lt;/p&gt;

&lt;p&gt;結局、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install fcgiwrap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;※もしかしたら libgcgi-perlも必要？でもなんか下記のfastcgi-wrapper.plを使う場合に必要なやつかも&lt;br /&gt;
/etc/init.d/fcgiwrap のFCGI_USERあたりを動かしたいユーザーやグループに変更。※お好みで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo sysv-rc-conf on fcgiwrap
sudo service fcgiwrap start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でFastCGIが動くようになる。&lt;br /&gt;
最初、fastcgi-wrapper.plを使う場合を参考にしてたけど、&lt;br /&gt;
参考：&lt;a href=&#34;http://ubuntu.flowconsult.at/linux/nginx-perl-fastcgi-installation-ubuntu-linux-14-04/&#34;&gt;http://ubuntu.flowconsult.at/linux/nginx-perl-fastcgi-installation-ubuntu-linux-14-04/&lt;/a&gt;&lt;br /&gt;
これだとなんかPerlのみっぽかったしTCPだったので、Unixソケットで通信にしたかったのとpythonやRubyでも動かしたかったのでfcgiwrapを使うようにした。&lt;/p&gt;

&lt;p&gt;Nginxの設定はlocationディレクティブだけ抜粋すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#拡張子が.plで終わるリクエストの場合
location ~ \.pl$ {
    try_files $uri = 404;
    gzip off;
    #インストールしたfcgiwrapのソケットファイルのパス
    fastcgi_pass unix:/var/run/fcgiwrap.socket;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    #/etc/nginx/fastcgi_paramsの内容を読み込む。
    include fastcgi_params;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo service nginx restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで適用にperl書いて(シェバンはもちろん#!/usr/bin/env perl ですよ)試したら動きました。&lt;/p&gt;

&lt;p&gt;自分はplenvを使っているのですが、システムのperl読み込まれてライブラリねーぞゴルァなった事があった。謎。&lt;br /&gt;
plenvの場合、require syscall.ph とかあると駄目っぽい？&lt;/p&gt;

&lt;p&gt;この記事書いてる時に見つけた他の方のWeb。先にここを見つけたかった。。。&lt;br /&gt;
参考：&lt;a href=&#34;http://ekzemplaro.org/data_base/doc/web_server/nginx/&#34;&gt;http://ekzemplaro.org/data_base/doc/web_server/nginx/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;やれやれですよ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2014年を振り返る インフラ系</title>
      <link>http://tech.k-zak.com/2014/12/30/milestone-infra</link>
      <pubDate>Tue, 30 Dec 2014 09:50:19 +0000</pubDate>
      
      <guid>http://tech.k-zak.com/2014/12/30/milestone-infra</guid>
      <description>&lt;p&gt;2014年を振り返る。インフラ関係について&lt;/p&gt;

&lt;p&gt;今年もっとも多く成長したのはインフラ関係についてだと思う。&lt;/p&gt;

&lt;p&gt;来年はもう少しスタートアップ用のシェルスクリプト理解して作れるようになりたい。&lt;/p&gt;

&lt;p&gt;PowerShellももう少し覚えてWindowsServer環境の制御も出来るようになりたい。&lt;/p&gt;

&lt;p&gt;構成管理は今年手を付けたVagrantとAnsibleをもっと掘り下げていきたい。&lt;/p&gt;

&lt;p&gt;VagrantはPackerを使ってVirtualBox以外のボックス作成やEC2へのアクセス。&lt;/p&gt;

&lt;p&gt;Ansibleは様々な構成管理、できればWindows環境も。&lt;/p&gt;

&lt;p&gt;来年取り組みたいのは、今年やりそこねたメールサーバーやログ設定、それからプロキシ設定かな&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>