<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>開発メモてきな</title>
    <link>http://tech.k-zak.com/index.xml</link>
    <description>Recent content on 開発メモてきな</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 31 Mar 2017 18:01:34 +0900</lastBuildDate>
    <atom:link href="http://tech.k-zak.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>jaws-ug container</title>
      <link>http://tech.k-zak.com/2017/03/31/jaws-ug-container</link>
      <pubDate>Fri, 31 Mar 2017 18:01:34 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/03/31/jaws-ug-container</guid>
      <description>

&lt;h1 id=&#34;jaws-ug-コンテナ支部-の勉強会に行ってきた&#34;&gt;JAWS-UG コンテナ支部 の勉強会に行ってきた&lt;/h1&gt;

&lt;p&gt;行ってきた。。&lt;/p&gt;

&lt;h2 id=&#34;前佛さんのお話&#34;&gt;前佛さんのお話&lt;/h2&gt;

&lt;p&gt;Dockerは仕様でコンテナが技術っていう話。&lt;/p&gt;

&lt;p&gt;開発環境と本番とかステージングの環境が違うっていう問題はコンテナで解決できますね。&lt;/p&gt;

&lt;p&gt;Dockerのイメージ・レイヤの概念のおかげで？ベースイメージを共有したり、イメージをコピーするのにも差分レイヤだけコピーするので早いとか。&lt;/p&gt;

&lt;h3 id=&#34;他のコンテナ技術との大きな違い&#34;&gt;他のコンテナ技術との大きな違い&lt;/h3&gt;

&lt;p&gt;今までに同様の技術はあったが、Dockerが大きく違うのは、DockerHubの存在。&lt;/p&gt;

&lt;p&gt;自分が作ったイメージはもちろん、他人が作ったものも共有(流用)できる。&lt;/p&gt;

&lt;p&gt;docker イメージの Github版。&lt;/p&gt;

&lt;h3 id=&#34;注意点&#34;&gt;注意点&lt;/h3&gt;

&lt;p&gt;ストレージドライバについては要件を考慮して決めましょう的な話。&lt;/p&gt;

&lt;p&gt;このあたりを読むと理解が深まるのでしょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.docker.jp/engine/userguide/storagedriver/imagesandcontainers.html&#34;&gt;イメージ、コンテナ、ストレージ・ドライバの理解&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.docker.jp/engine/userguide/storagedriver/selectadriver.html&#34;&gt;ストレージ・ドライバの選択&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ecs関連のアップデート&#34;&gt;ECS関連のアップデート&lt;/h2&gt;

&lt;p&gt;Windows コンテナ も試せる Windows Server 2016 の AMIもでてるよ。とか。&lt;/p&gt;

&lt;h3 id=&#34;ecrについて&#34;&gt;ECRについて&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;フルマネージドDockerレジストリサービス&lt;/li&gt;
&lt;li&gt;イメージの容量に対して課金&lt;/li&gt;
&lt;li&gt;コンテナイメージは自動的に暗号化できる設定がある&lt;/li&gt;
&lt;li&gt;もちろんIAM使える&lt;/li&gt;
&lt;li&gt;ECRをCloudTrailで追跡可能&lt;/li&gt;
&lt;li&gt;CredentialHelper使ってね&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;業務上プライベートなDockerイメージを置く場所を作りたい場合なんかいいですね。&lt;/p&gt;

&lt;h2 id=&#34;社内ビッグデータ基盤にバッチ用コンテナ環境を構築してみた&#34;&gt;社内ビッグデータ基盤にバッチ用コンテナ環境を構築してみた&lt;/h2&gt;

&lt;p&gt;既存の触りたくないバッチ環境をそのままに、API Gateway、ECS、SQSなんかを活用してバッチ処理環境を改善した話。&lt;/p&gt;

&lt;p&gt;既存のサーバーには何も追加したくない、が、curlは基本的に入っているので処理スタートをcurlから始める。&lt;/p&gt;

&lt;p&gt;API Gateway を通じてリクエストを受け取り、ECS環境でバッチ処理、処理結果をSQSで通知みたいな。&lt;/p&gt;

&lt;p&gt;ボリュームはできるだけ使わない。ログは全てCloudWatchLogsに流す。&lt;/p&gt;

&lt;p&gt;すごい。&lt;/p&gt;

&lt;h2 id=&#34;nttとdocker&#34;&gt;NTTとDocker&lt;/h2&gt;

&lt;p&gt;ECSで複数コンテナ構成な場合、SpotFleetを活用するとコストを抑えられますって話。&lt;/p&gt;

&lt;h3 id=&#34;ecsを活用する上での勘所&#34;&gt;ECSを活用する上での勘所&lt;/h3&gt;

&lt;h4 id=&#34;データについて&#34;&gt;データについて&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;なるべくDocker Volumeを使わないで済む設計にする

&lt;ul&gt;
&lt;li&gt;いつでもインスタンスを捨てられるようにする設計&lt;/li&gt;
&lt;li&gt;永続DBデータはRDS,DynamoDBに、ファイルはS3に、ログはCloudWatchLogsを活用する&lt;/li&gt;
&lt;li&gt;awslogs ログドライバ便利です。積極的に使っていきましょう。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;URLパスの設計

&lt;ul&gt;
&lt;li&gt;ALBを活用しましょう&lt;/li&gt;
&lt;li&gt;関連サービスのエントリポイントとかは環境変数で渡しましょう。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;セッションの管理

&lt;ul&gt;
&lt;li&gt;インスタンスにセッションを任せてしまうのは複数コンテナでサービスというのと相性悪い&lt;/li&gt;
&lt;li&gt;ElastiCache,Redis,Memcachedを活用しましょう。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;環境構築について&#34;&gt;環境構築について&lt;/h3&gt;

&lt;p&gt;書き洩らした。ECS-optimized AMIを使いましょうというのとSpotFleet活用しようみたいな&lt;/p&gt;

&lt;h2 id=&#34;datadogの人からlt&#34;&gt;Datadogの人からLT&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Dockerはトレンドどしてきてる。&lt;/li&gt;
&lt;li&gt;コンテナを50−100個以上使うようになるとECS使うところがとても増える&lt;/li&gt;
&lt;li&gt;一度ECSなどマネージドなオーケストレーション使うようになると、使う前に比べてコンテナが増えるペースが増加？増大？する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一度キャッシングの味を覚えた人がどんどんキャッシングするようになるのと似てるのかな？&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hexo etc</title>
      <link>http://tech.k-zak.com/2017/03/29/hexo-etc</link>
      <pubDate>Wed, 29 Mar 2017 22:37:07 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/03/29/hexo-etc</guid>
      <description>

&lt;h1 id=&#34;勉強の進捗とhexoの改修&#34;&gt;勉強の進捗とHexoの改修&lt;/h1&gt;

&lt;p&gt;いろいろいっぱいいっぱいで諦めたことと、作業したこと。&lt;/p&gt;

&lt;h2 id=&#34;スプリントの進捗&#34;&gt;スプリントの進捗&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Mackerelのプラグイン試すとか諦めて、3月までの課題終了。&lt;/li&gt;
&lt;li&gt;Docker学習、3月までの課題終了。Swarmとか諦めた。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;時間に余裕ができたらまた集中して取り組む。&lt;/p&gt;

&lt;h2 id=&#34;hexoのレイアウト改修&#34;&gt;Hexoのレイアウト改修&lt;/h2&gt;

&lt;p&gt;TOPの画像がサイトタイトルを隠しちゃう感じだったのでCSSを変えるとかしようと考えてた。&lt;/p&gt;

&lt;h3 id=&#34;行ったこと&#34;&gt;行ったこと&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;画像を変更。ブログテーマに幾分合ってそうなものに変えたつもり。&lt;/li&gt;
&lt;li&gt;画像をちょっと暗めにしたかったので少しCSS変更。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いい感じになった。&lt;/p&gt;

&lt;h3 id=&#34;やらなかったこと&#34;&gt;やらなかったこと&lt;/h3&gt;

&lt;p&gt;全体的な直しをしようか迷ったけど、要件を十分果たしていると判断して何もしないことにした。&lt;/p&gt;

&lt;p&gt;ファイル名、URLパス、記事タイトルが同じじゃないといけないのがちょっとキモい。&lt;/p&gt;

&lt;p&gt;そんな感じ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>docker reinstall</title>
      <link>http://tech.k-zak.com/2017/03/28/docker-reinstall</link>
      <pubDate>Tue, 28 Mar 2017 23:57:46 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/03/28/docker-reinstall</guid>
      <description>

&lt;h1 id=&#34;dockerを再インストールした&#34;&gt;Dockerを再インストールした&lt;/h1&gt;

&lt;p&gt;Dockerが全然触らないうちにどんどん進化していってしまったので、一旦アンインストールして、入れ直した。&lt;/p&gt;

&lt;p&gt;環境はmacOS 10.11 えるかぴたん&lt;/p&gt;

&lt;h2 id=&#34;やったこと&#34;&gt;やったこと&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;docker-machine(boot2docker)の中身を全て削除

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker-machine rm default&lt;/code&gt;とか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;docker-machineを完全削除するらしいツールを使って削除実行&lt;/li&gt;
&lt;li&gt;Virtualboxを確認して環境が残っていないか確認&lt;/li&gt;
&lt;li&gt;.bash_profileに記述していた環境変数設定を削除&lt;/li&gt;
&lt;li&gt;homeディレクトリ直下の.dockerみたいな隠し領域も削除&lt;/li&gt;
&lt;li&gt;公式から改めてdocker for mac をダウンロードしてインストール&lt;/li&gt;
&lt;li&gt;ついでに改めてKitematicもダウンロードしてアプリケーションディレクトリに配置&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;ハマったこと&#34;&gt;ハマったこと&lt;/h3&gt;

&lt;p&gt;単に自分が愚かなだけなんだけど、最初、docker-machineを削除した後にターミナルを再起動？しなかったため、Docker関係の環境変数が残ったま間の状態で新しく入れたDockerに対して&lt;code&gt;docker -v&lt;/code&gt;とかやってエラーを出してた。&lt;/p&gt;

&lt;p&gt;ターミナルを再起動して解決&lt;/p&gt;

&lt;h2 id=&#34;ここまで&#34;&gt;ここまで&lt;/h2&gt;

&lt;p&gt;今日はここまで。&lt;/p&gt;

&lt;p&gt;今後、先送りしてたswarmモードとやらを試したりしたい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>challenge mackerel plugin</title>
      <link>http://tech.k-zak.com/2017/03/27/challenge-mackerel-plugin</link>
      <pubDate>Mon, 27 Mar 2017 23:36:40 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/03/27/challenge-mackerel-plugin</guid>
      <description>

&lt;h1 id=&#34;mackerelのカスタムメトリクスに挑戦&#34;&gt;Mackerelのカスタムメトリクスに挑戦&lt;/h1&gt;

&lt;p&gt;して撃沈。&lt;/p&gt;

&lt;h2 id=&#34;何が起きたか&#34;&gt;何が起きたか&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://mackerel.io/ja/docs/entry/advanced/custom-metrics&#34;&gt;公式のヘルプ&lt;/a&gt; を見ながら写経してUbuntu 16.04のサーバー上でカスタムメトリクスを作成して設定したが、うまくいかない。エラーが出る。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;YYYY/MM/DD 時分秒 INFO &amp;lt;metrics.plugin&amp;gt; command /path/to/sample-metrics.rb outputted to STDERR: &amp;quot;/path/to/sample-metrics.rb: 10: /home/osawa/sample-metrics.rb: Syntax error: \&amp;quot;}\&amp;quot; unexpected (expecting \&amp;quot;then\&amp;quot;)\n&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;改行が足りない？&lt;/p&gt;

&lt;p&gt;rubyファイルを単独で実行すると動くので謎。&lt;/p&gt;

&lt;p&gt;これだからRubyは。&lt;/p&gt;

&lt;p&gt;とりあえず、Mackerelは初期設定のままのメトリクスだけでいいや。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Challenged Jekyll template and hate</title>
      <link>http://tech.k-zak.com/2017/03/26/challenged-jekyll-template-and-hate</link>
      <pubDate>Sun, 26 Mar 2017 18:32:49 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/03/26/challenged-jekyll-template-and-hate</guid>
      <description>

&lt;h1 id=&#34;jekyllの画面-テンプレート-作った&#34;&gt;Jekyllの画面(テンプレート)作った&lt;/h1&gt;

&lt;p&gt;結論から言うと、二度と使いたくない。&lt;/p&gt;

&lt;p&gt;Pelicanの方がいいや。&lt;/p&gt;

&lt;h2 id=&#34;やりたかったこと&#34;&gt;やりたかったこと&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;TOPページ：直近5件程の記事タイトルを表示する&lt;/li&gt;
&lt;li&gt;タグごとの記事一覧ページを作る&lt;/li&gt;
&lt;li&gt;タグの一覧ページ作る&lt;/li&gt;
&lt;li&gt;カテゴリごとの記事一覧ページを作る&lt;/li&gt;
&lt;li&gt;カテゴリの一覧ページ作る&lt;/li&gt;
&lt;li&gt;アーカイブ(年月)ごとの記事一覧ページを作る&lt;/li&gt;
&lt;li&gt;アーカイブ(年月)の一覧ページ作る&lt;/li&gt;
&lt;li&gt;Aboutの固定ページを作る&lt;/li&gt;
&lt;li&gt;サイドバーにカテゴリ、タグ、アーカイブ、Aboutのリンクを作る&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;できたこと&#34;&gt;できたこと&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;TOPページ：直近5件程の記事タイトルを表示する&lt;/li&gt;
&lt;li&gt;タグごとの記事一覧ページを作る&lt;/li&gt;
&lt;li&gt;タグの一覧ページ作る&lt;/li&gt;
&lt;li&gt;カテゴリごとの記事一覧ページを作る&lt;/li&gt;
&lt;li&gt;カテゴリの一覧ページ作る&lt;/li&gt;
&lt;li&gt;Aboutの固定ページを作る&lt;/li&gt;
&lt;li&gt;サイドバーにカテゴリ、タグ、Aboutのリンクを作る&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;乗り越えた事&#34;&gt;乗り越えた事&lt;/h2&gt;

&lt;p&gt;HexoやHugoは既存のテーマをそのまま使ったからなんとも言えないけど、Pelicanは一から作った際にも苦労しなかったカテゴリやタグの一覧ページを作るのにJekyllは苦労した。&lt;/p&gt;

&lt;p&gt;標準で機能がついてなくて、pluginディレクトリにページを生成するモジュール？を書いて対応した。&lt;/p&gt;

&lt;p&gt;公式に載っているコードをほぼそのまま使いまわしたんだけど、Rubyの世界というかJekyllではカテゴリやタグごとのページ生成は静的サイトジェネレーターの標準機能のうちには入らないらしい。&lt;/p&gt;

&lt;h2 id=&#34;あきらめた事&#34;&gt;あきらめた事&lt;/h2&gt;

&lt;h3 id=&#34;アーカイブページ&#34;&gt;アーカイブページ&lt;/h3&gt;

&lt;p&gt;上記のカテゴリやタグのページ生成のノリでいけるかと思ったけど無理だった。&lt;/p&gt;

&lt;p&gt;正確には気持ちが切れた。&lt;/p&gt;

&lt;p&gt;Pelicanの場合、記事リストをgroup by　した結果をそのままfor分で使えるのだけれど、Jekyllが使っているテンプレートエンジンではできないらしく、いちいち変数にアサインしないといけない。そのくせ、変数にアサインする時はgroup by も sort もできるらしい。&lt;/p&gt;

&lt;p&gt;あと、気づかなかったんだけど、記事のデータに投稿年月日の年や月のデータがないので結局こねくり回さないと、年や月でgroup byした記事リストの抽出がうまくできない。&lt;/p&gt;

&lt;p&gt;この、年月ごとに記事リストを抽出したオブジェクトが簡単には生成できないので、サイドバーの表示もアーカイブリストの生成もうまくできそうにないので諦めた。&lt;/p&gt;

&lt;p&gt;あと、ググって出てきた書き方が汚いというか美しくないというか、「え？こんな手続き型なめんどくさい記述をテンプレートで書くの？」みたいなのが散見されて嫌になった。&lt;/p&gt;

&lt;p&gt;まったくもう。&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://jekyllrb.com/docs/home/&#34;&gt;Jekyll公式&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Rubyを理解したら見直せるかもしれないけど、それまではもう触りたくない。&lt;/p&gt;

&lt;p&gt;記事の投稿だけはして使い続けてみる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>replace hugo post rule</title>
      <link>http://tech.k-zak.com/2017/03/25/replace-hugo-post-rule</link>
      <pubDate>Sat, 25 Mar 2017 22:43:59 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/03/25/replace-hugo-post-rule</guid>
      <description>

&lt;h1 id=&#34;hugoの記事の命名規則を見直して直した&#34;&gt;Hugoの記事の命名規則を見直して直した&lt;/h1&gt;

&lt;p&gt;辛かった。&lt;/p&gt;

&lt;p&gt;カテゴリ名、タグ名、ファイル名、記事のタイトル。これらが日本語だとジェネレート後のディレクトリ名、ファイル名、URLパス等で日本語が混ざってしまうので、片っ端から探して変更した。&lt;/p&gt;

&lt;p&gt;今後は記事内容以外では絶対に日本語を使わないようにしないと。&lt;/p&gt;

&lt;p&gt;これはおそらくHugoに限らず静的サイトジェネレーターならだいたいそうだと思う。&lt;/p&gt;

&lt;p&gt;しかしカテゴリ名やタグ名で日本語使えないのは辛いな。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I tried Mackerel</title>
      <link>http://tech.k-zak.com/2017/03/24/i-tried-mackerel</link>
      <pubDate>Fri, 24 Mar 2017 18:32:38 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/03/24/i-tried-mackerel</guid>
      <description>

&lt;h1 id=&#34;勇気を出してmackerelを試してみた&#34;&gt;勇気を出してMackerelを試してみた&lt;/h1&gt;

&lt;p&gt;前々から気にはなっていたMackerelをお試しで入れてみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VPS契約しているUbuntu16.04&lt;/li&gt;
&lt;li&gt;使い捨てのAWS上WIndows2012&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;ヘルプに書いてある通りに作業してつまずく事もなくすんなりできた。&lt;/p&gt;

&lt;h2 id=&#34;監視項目&#34;&gt;監視項目&lt;/h2&gt;

&lt;h3 id=&#34;デフォルト監視項目&#34;&gt;デフォルト監視項目&lt;/h3&gt;

&lt;p&gt;通常の監視項目で既に普段Zabbixで見て使っている項目を監視できているので、Zabbix使いこなす気がないならMackerelでいいかなって思った。&lt;/p&gt;

&lt;h3 id=&#34;カスタムメトリック&#34;&gt;カスタムメトリック&lt;/h3&gt;

&lt;p&gt;今回はまだ試していない。&lt;/p&gt;

&lt;p&gt;けど、簡単そうだ。&lt;/p&gt;

&lt;h3 id=&#34;プラグインの作成&#34;&gt;プラグインの作成&lt;/h3&gt;

&lt;p&gt;今回はまだ試していない。&lt;/p&gt;

&lt;p&gt;golangじゃないといけないのかと思っていたけれど、他の言語でもいいらしい。&lt;/p&gt;

&lt;h3 id=&#34;外形監視&#34;&gt;外形監視&lt;/h3&gt;

&lt;p&gt;ホストが止まっても監視を続けるので、仕様上間違ってはいないんだけどずっとエラーがで続ける。&lt;/p&gt;

&lt;p&gt;ホストをメンテナンスにしたり停止したりした時は外形監視も停止する仕組みがあるといいいかなって思った。&lt;/p&gt;

&lt;p&gt;外形監視の定義削除しかなかったように思える。&lt;/p&gt;

&lt;h3 id=&#34;通知設定&#34;&gt;通知設定&lt;/h3&gt;

&lt;p&gt;通知設定も簡単だし、いろんなサービス(Slackとか)と簡単に連携できるのも魅力だなと感じた。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;まだプラグインを試していないのだけれど、とにかくヘルプドキュメントが素晴らしいと感じた。&lt;/p&gt;

&lt;p&gt;自分ならそこまではやらないよってくらいに丁寧に書いてあった。&lt;/p&gt;

&lt;p&gt;特に感心したのは他サービスと連携するために、他サービス上での設定の説明が画面キャプチャ入りで説明されていたこと。&lt;/p&gt;

&lt;p&gt;小規模な場合にフリーでどこまで使えるのかフリープランを調べていきたい。&lt;/p&gt;

&lt;p&gt;Zabbixサーバーを一台用意する場合との費用比較とか調べていきたい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>i got caught in utf8</title>
      <link>http://tech.k-zak.com/2017/03/23/i-got-caught-in-utf8</link>
      <pubDate>Thu, 23 Mar 2017 21:47:31 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/03/23/i-got-caught-in-utf8</guid>
      <description>

&lt;h1 id=&#34;utf-8-mac-にまたしてもやられた&#34;&gt;UTF-8-MAC にまたしてもやられた&lt;/h1&gt;

&lt;p&gt;全角のチルダだか波ダッシュだかがmacOSの時とそれ以外で違う文字コードなのか別の文字なのか、とにかく想定外の文字コードのものがバリデーションをすり抜けてきた。&lt;/p&gt;

&lt;p&gt;一つのOS上で禁止文字を羅列して出来たつもりになってたけどUTF−8−MACにはこれからも悩まされるんだろうなー。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bitbucket is cool</title>
      <link>http://tech.k-zak.com/2017/03/22/bitbucket-is-cool</link>
      <pubDate>Wed, 22 Mar 2017 21:47:01 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/03/22/bitbucket-is-cool</guid>
      <description>

&lt;h1 id=&#34;bitbucketけっこういいかも&#34;&gt;Bitbucketけっこういいかも&lt;/h1&gt;

&lt;p&gt;プライベートリポジトリ欲しくてBitbucket試してみた。&lt;/p&gt;

&lt;h2 id=&#34;乾燥&#34;&gt;乾燥&lt;/h2&gt;

&lt;p&gt;Gitが使えるのでhg clone フォー！(古い)とかやらなくていいし抵抗なくて使えていいですね。&lt;/p&gt;

&lt;p&gt;なんかWikiとか課題(issue)とかも使えるし、どうやらGithubPagesみたいのもできるみたい。
なんかTrelloともなんか連携できるみたいでいいですね。&lt;/p&gt;

&lt;p&gt;使いこなせる自信ないけどPipelineてのもあるらしい。&lt;/p&gt;

&lt;p&gt;Githubとの使い分けがなやましいけど、とりあえずはプライベートにしたいものは基本Bitbucketにしよう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Agile and Sprint myself</title>
      <link>http://tech.k-zak.com/2017/03/21/agile-and-sprint-myself</link>
      <pubDate>Tue, 21 Mar 2017 23:52:11 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/03/21/agile-and-sprint-myself</guid>
      <description>

&lt;h1 id=&#34;自分の目標をアジャイルにスプリントな感じで少しずつ達成していきたい&#34;&gt;自分の目標をアジャイルにスプリントな感じで少しずつ達成していきたい&lt;/h1&gt;

&lt;p&gt;と、言うことです。&lt;/p&gt;

&lt;p&gt;覚えたいこと、挑戦したいことを目標とするはいいけど、いつまでたっても着手しなかったり遅々として進まなかったりするので優先順位をつけて期限を設けて手中して取り組んでいけば少しは結果が変わってくると信じたい。&lt;/p&gt;

&lt;h2 id=&#34;現在の目標&#34;&gt;現在の目標&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ブログや静的サイトのテーマをつくり込みたい(Pelican,Hexo,Jekyll,WordPress,Hugo,Sphinx)&lt;/li&gt;
&lt;li&gt;AWSの機能のだいたいを触って感覚を掴んでおきたい&lt;/li&gt;
&lt;li&gt;Microsoft Azureを触ってAWSとの違いを掴んでおきたい&lt;/li&gt;
&lt;li&gt;GCC？を以下略&lt;/li&gt;
&lt;li&gt;Blumixに挑戦したい&lt;/li&gt;
&lt;li&gt;FreeBSDを構築したい&lt;/li&gt;
&lt;li&gt;Alpineを構築して慣れたい&lt;/li&gt;
&lt;li&gt;Ansibleを一通り触っていろいろできるよういなりたい&lt;/li&gt;
&lt;li&gt;Dockerをある程度使えるようになりたい&lt;/li&gt;
&lt;li&gt;IPv6の学習と擬似ネットワークの構築してみたい&lt;/li&gt;
&lt;li&gt;VPNの設定をGUIじゃなくても設定できるようになりたい&lt;/li&gt;
&lt;li&gt;VyOS？を試してみたい&lt;/li&gt;
&lt;li&gt;Shell及びAWKを覚えたい&lt;/li&gt;
&lt;li&gt;Powershellを覚えたい&lt;/li&gt;
&lt;li&gt;dot net C#を覚えたい&lt;/li&gt;
&lt;li&gt;Javaを覚えたい&lt;/li&gt;
&lt;li&gt;Androidを覚えたい&lt;/li&gt;
&lt;li&gt;Swiftを覚えたい&lt;/li&gt;
&lt;li&gt;JavaScriptをもっと使いこなせるようになりmたい&lt;/li&gt;
&lt;li&gt;Perl6/Perl5を使えるようになりたい&lt;/li&gt;
&lt;li&gt;PHP7を覚えたい&lt;/li&gt;
&lt;li&gt;PHPのフレームワーク、Laravelを覚えたい&lt;/li&gt;
&lt;li&gt;Nginxに組み込むLuaを少し試したい&lt;/li&gt;
&lt;li&gt;Ruby/Railsを覚えたい&lt;/li&gt;
&lt;li&gt;Python3をもう少し使えるようになりたい&lt;/li&gt;
&lt;li&gt;Scalaちょっと覚えたい&lt;/li&gt;
&lt;li&gt;Lispわかるようになりたい&lt;/li&gt;
&lt;li&gt;Clojure書けるようになりたい&lt;/li&gt;
&lt;li&gt;Haskell読めるようになりたい&lt;/li&gt;
&lt;li&gt;F#ちょっとしたものなら書けるようになりたい&lt;/li&gt;
&lt;li&gt;ActiveDirectory/OpenDirectoryがわかるようになりたい。&lt;/li&gt;
&lt;li&gt;Golang書けるようになりたい&lt;/li&gt;
&lt;li&gt;Makerel試したい&lt;/li&gt;
&lt;li&gt;Erlang読み書きできるようになりたい&lt;/li&gt;
&lt;li&gt;Elasticsearch扱えるようになりたい&lt;/li&gt;
&lt;li&gt;Neo4j試したい&lt;/li&gt;
&lt;li&gt;MongoDB試したい&lt;/li&gt;
&lt;li&gt;DynamoDB試したい&lt;/li&gt;
&lt;li&gt;Redis扱えるようになりたい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とっても曖昧なものが多い。。&lt;/p&gt;

&lt;h2 id=&#34;今もっとも取り組みたいことを多くて3つに絞るなら&#34;&gt;今もっとも取り組みたいことを多くて3つに絞るなら&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;ブログや静的サイトのテーマをつくり込みたい(Pelican,Hexo,Jekyll,WordPress,Hugo,Sphinx)&lt;/li&gt;
&lt;li&gt;Makerel試したい&lt;/li&gt;
&lt;li&gt;Dockerをある程度使えるようになりたい&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以下、打ち消し戦のものは現時点で達成済みのもの&lt;/p&gt;

&lt;h3 id=&#34;1-ブログや静的サイトのテーマをつくり込みたい&#34;&gt;1. ブログや静的サイトのテーマをつくり込みたい&lt;/h3&gt;

&lt;p&gt;Pelican,Hexo,Jykell,WordPress,Hugo,Sphinxで動かし始めた静的サイトのテーマを一から作ってみたり、採用したテーマをカスタマイズしたりして見やすさやアクセスのしやすさを向上させる。&lt;/p&gt;

&lt;h4 id=&#34;目的&#34;&gt;目的&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;各静的サイトジェネレータのテンプレートの書き方を覚える&lt;/li&gt;
&lt;li&gt;&lt;del&gt;レスポンシブレイアウトを一から作ってみてカラダで覚える&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;GoogleAnalyticsやアフィリエイトコードの埋め込み等を試す&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;達成条件-5月上旬までに&#34;&gt;達成条件:5月上旬までに&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;ベースとなるレスポンシブレイアウトを作成する&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Pelican用のテーマを一から作成する(jinja2)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Hexoで採用したテーマを見直し改良する(ejs)&lt;/li&gt;
&lt;li&gt;WordPressのテーマを一から作成し、よく使いそうな関数のチーとシート的なものを作成する(PHP)&lt;/li&gt;
&lt;li&gt;Jekyllのテーマを一から作成してjinjaとの違いを体感する。(?)&lt;/li&gt;
&lt;li&gt;Sphinxのテーマを改良し、Pelicanとの勝手の違いを体験する(多分jinja2)&lt;/li&gt;
&lt;li&gt;Hugoのテーマを改良してgolanぽさを体験する(?)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;派生目標-別途達成条件や時期を検討する&#34;&gt;派生目標:別途達成条件や時期を検討する&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;GithubPagesを試す&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Bitbucketを試す&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Fabric/Capistranoを試す&lt;/li&gt;
&lt;li&gt;Jenkinsを試す。コミットからのS3もしくはWebサイトへのプッシュができないか検討する&lt;/li&gt;
&lt;li&gt;コードをプッシュではなく、Dockerコンテナをプッシュする方法を試す&lt;/li&gt;
&lt;li&gt;S3のhttps化&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-makerel試したい&#34;&gt;2. Makerel試したい&lt;/h3&gt;

&lt;p&gt;MBPにステッカーを貼ってしまったので、なんちゃってでも使って試す。&lt;/p&gt;

&lt;h4 id=&#34;目的-1&#34;&gt;目的&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;ツールとしての勝手をつかむ&lt;/li&gt;
&lt;li&gt;Linuxでの使い方、Windowsでの使い方を覚える&lt;/li&gt;
&lt;li&gt;プラグインの使い方を覚える&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;達成条件-3月中&#34;&gt;達成条件:3月中&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Linuxにインストール&lt;/li&gt;
&lt;li&gt;Windowsにインストール&lt;/li&gt;
&lt;li&gt;かんたんなプラグインを作成してみる(車輪の再発明でよい)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-dockerをある程度使えるようになりたい&#34;&gt;3. Dockerをある程度使えるようになりたい&lt;/h3&gt;

&lt;h4 id=&#34;目的-2&#34;&gt;目的&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;DockerSwarmを試して勝手を掴む&lt;/li&gt;
&lt;li&gt;Kubernatesを試して勝手を掴む&lt;/li&gt;
&lt;li&gt;Dockerコンテナマネージドサービスを利用して買ってをつかむ&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;達成条件-3月中-1&#34;&gt;達成条件:3月中&lt;/h4&gt;

&lt;p&gt;何種類かのdocker composeを作成する
VagrantもしくはEC2上でdocker swarmを試す
VagrantもしくはEC2上でKubernatesを試す
AWS/GCP/Azure/Blumix上でマネージドなコンテナサービスを試す&lt;/p&gt;

&lt;h2 id=&#34;なぜスプリント&#34;&gt;なぜスプリント？&lt;/h2&gt;

&lt;p&gt;おそらく、目標が雑多で曖昧なのと、こういった勉強や訓練？に真面目に割ける時間がもう少ないと考えているので、限られた時間の中で自分の人生の中で時間対効果が高そうなものから絞って集中して取り組むことで成果を上げやすくしていこうと考えています。&lt;/p&gt;

&lt;p&gt;あれもこれもじゃなくて、これだけ。これだけ。って絞って集中して残り少ない人生を進んでいこうと考えています。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pelicanのレイアウト作成</title>
      <link>http://tech.k-zak.com/2017/03/20/create-pelican-theme</link>
      <pubDate>Mon, 20 Mar 2017 18:26:58 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/03/20/create-pelican-theme</guid>
      <description>

&lt;h1 id=&#34;pelicanで使う自分用テーマを作成した&#34;&gt;Pelicanで使う自分用テーマを作成した&lt;/h1&gt;

&lt;p&gt;静的サイトジェネレーター用の基本的なブログレイアウトを一つ作っておくと使い回しができると思い、Python製のPelicanから着手することにしてみた。&lt;/p&gt;

&lt;p&gt;結論から言うと、なかなか時間がとれないのもあって、足掛け2ヶ月かかった。&lt;/p&gt;

&lt;h2 id=&#34;その1-ベースとなるレイアウトを素組する&#34;&gt;その1：ベースとなるレイアウトを素組する&lt;/h2&gt;

&lt;p&gt;htmlとCSSのみでできるだけレスポンシブな簡易ブログ用のレイアウトを考えて作った。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sakadonohito/site-base-theme&#34;&gt;https://github.com/sakadonohito/site-base-theme&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;flexboxを中途半端に使っているのと、Pelicanテーマ作り終わってからフィードバックしている部分もある。ホント適当。&lt;/p&gt;

&lt;p&gt;CSSはSCSSからWebpackでビルドしているけど、限りなく必要ないレベル。
EmacsならSCSS保存する時にCSSをビルドしてくれるのでホント不要な構造、しかも作り終わる前にWebpackは2がでちゃってバージョンが古いというオマケつき。
そうです、Webpack使ってるぜアッピルがしたかっただけなのです。&lt;/p&gt;

&lt;h2 id=&#34;その2-pelicanのテーマを作る&#34;&gt;その2：Pelicanのテーマを作る&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;ググって出てきたシンプルなテーマをコピーして&lt;/li&gt;
&lt;li&gt;作ったベースレイアウトにまるっと取り替えて&lt;/li&gt;
&lt;li&gt;変数部分がちゃんと展開されるように調整して&lt;/li&gt;
&lt;li&gt;パーツをバラす&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;みたいな感じで作成。&lt;/p&gt;

&lt;p&gt;結局よくりようしたのは&lt;a href=&#34;http://docs.getpelican.com/en/3.6.3/themes.html&#34;&gt;公式ドキュメント&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ハマったところ&#34;&gt;ハマったところ&lt;/h2&gt;

&lt;h3 id=&#34;1-見本にしたテーマのパーツ毎の役割がよくわからなかった&#34;&gt;1. 見本にしたテーマのパーツ毎の役割がよくわからなかった&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;categories.html&lt;/code&gt;と&lt;code&gt;category.html&lt;/code&gt;ってあって、最初複数形のはカテゴリ別の一覧表示で単数系のは1記事のパーツかと思ったら、複数形はカテゴリ名の一覧で単数系が特定のカテゴリでの記事一覧だった。
タグの場合はさらに1記事用パーツレイアウトにはめ込む用の記事に関連づいたタグを横一列に並べるtaglist.htmlなんてのもあって、さらに混乱した。&lt;/p&gt;

&lt;h3 id=&#34;2-ビルド失敗した時どこでエラーが発生したのか分からない&#34;&gt;2. ビルド失敗した時どこでエラーが発生したのか分からない&lt;/h3&gt;

&lt;p&gt;ビルドのエラーログの出力設定があるのか調べていないだけなんだけど、テンプレート作成している時にビルドエラー発生したけど、どこの編集のせいか分からない(1行文法エラーで失敗したぜ！的なメッセージがでるだけ)のでこまめにビルドして確認しながらじゃないと迷路に迷い込む。&lt;/p&gt;

&lt;p&gt;ショートカットキーのタイポとかで変な場所に意図せず文字を入力してしまっているのに気づかず、ビルドが失敗した時には、身に覚えがなかったので解決に時間がかかった(2分探索みたいにコードを消したり戻したりしながらビルドしてエラー箇所を探した)。&lt;/p&gt;

&lt;h3 id=&#34;3-記事データのリストオブジェクトは生成するページのコンテキストに依存するものがある&#34;&gt;3. 記事データのリストオブジェクトは生成するページのコンテキストに依存するものがある&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;period_Archives.html&lt;/code&gt;っていう特定の期間の記事リストを表示するためのパーツの上で&lt;strong&gt;articles&lt;/strong&gt;という記事リストオブジェクトは全体じゃなくて、その期間の記事リストオブジェクト。全記事のリストは代わりに&lt;strong&gt;all_articles&lt;/strong&gt;てのある。じゃぁ常に&lt;strong&gt;all_articles&lt;/strong&gt;を使えば？ってなるんだけど、TOPとか他の場所だとこの&lt;strong&gt;all_articles&lt;/strong&gt;は空欄。&lt;/p&gt;

&lt;h3 id=&#34;4-年月毎に記事のカウントを取ったりurl分ける方法の説明がおろそか&#34;&gt;4. 年月毎に記事のカウントを取ったりURL分ける方法の説明がおろそか&lt;/h3&gt;

&lt;p&gt;結論からいうと、URLについては設定ファイルに&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;MONTH_ARCHIVE_SAVE_AS = &#39;{date:%Y}/{date:%m}/index.html&#39;
他にも
AUTHOR_SAVE_AS とか
PAGE_SAVE_AS なんかもあるのよ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とか書いておくと、/2017/03/みたいなパスで2017年3月の記事の一覧ページが生成される。今にして思うと年のフォルダ&amp;amp;月を意味するファイルの組み合わせでよかったんじゃないか説もある。&lt;/p&gt;

&lt;p&gt;年月の記事カウントについては全記事を年でまとめた記事リストの記事リストを作成して「記事リスト」をさらに月でまとめてカウントを取るみたいなことをやる。
これはそんなようなことをするサンプルのテーマがたまたま見つかったから作れたけど見つからなかったらアーカイブのページが断念したと思う。&lt;/p&gt;

&lt;p&gt;こんな感じ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;section&amp;gt;
	&amp;lt;p&amp;gt;Archives&amp;lt;/p&amp;gt;
	{% if all_articles|count %}
	&amp;lt;ul&amp;gt;
		{% for year, date_year in all_articles|groupby(&#39;date.year&#39;)|sort(reverse=NEWEST_FIRST_ARCHIVES) %}
		　　{% for month, articles in date_year|groupby(&#39;date.month&#39;)|sort(reverse=NEWEST_FIRST_ARCHIVES) %}
		　　　　&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/{{ year }}/{{ &#39;%02d&#39; % month }}/&amp;quot;&amp;gt;{{ year }}年{{ month }}月&amp;lt;/a&amp;gt;({{ articles|count }})&amp;lt;/li&amp;gt;
		　　{% endfor %}
		{% endfor %}
	&amp;lt;/ul&amp;gt;
	{% elif articles %}
	&amp;lt;ul&amp;gt;
	{% for year, date_year in articles|groupby(&#39;date.year&#39;)|sort(reverse=NEWEST_FIRST_ARCHIVES) %}
	　　{% for month, articles in date_year|groupby(&#39;date.month&#39;)|sort(reverse=NEWEST_FIRST_ARCHIVES) %}
		　　　　&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/{{ year }}/{{ &#39;%02d&#39; % month }}/&amp;quot;&amp;gt;{{ year }}年{{ month }}月&amp;lt;/a&amp;gt;({{ articles|count }})&amp;lt;/li&amp;gt;
	　　{% endfor %}
	{% endfor %}
	&amp;lt;/ul&amp;gt;
	{% endif %}
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正直リストオブジェクトをパイプで次の処理に渡せるのjinjaのドキュメント見なかったら想像もできなかったので、このパターンのサンプルくらいPelicanのドキュメントにも載せておいてほしい。&lt;/p&gt;

&lt;h3 id=&#34;5-1つのテンプレートファイルに複数のブロックを書ける&#34;&gt;5. 1つのテンプレートファイルに複数のブロックを書ける&lt;/h3&gt;

&lt;p&gt;ハマったことではないんだけど、パーツ側が1ブロックしか書いちゃいけないと最初思ってたので。
複数のブロックを書けるので、メインコンテンツのブロックとは別の離れた場所に共通化できないテンプレートごとの何かを表示させたい要素がある時なんかに便利だなーと思った。&lt;/p&gt;

&lt;h2 id=&#34;総括&#34;&gt;総括&lt;/h2&gt;

&lt;p&gt;テンプレート作成したけど設計失敗かも。&lt;/p&gt;

&lt;p&gt;今回作成したPelicanのテーマ&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sakadonohito/pelican-theme-simple&#34;&gt;https://github.com/sakadonohito/pelican-theme-simple&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pelicanを試す</title>
      <link>http://tech.k-zak.com/2017/02/20/first-pelican</link>
      <pubDate>Mon, 20 Feb 2017 15:26:44 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/02/20/first-pelican</guid>
      <description>

&lt;h1 id=&#34;python製の静的サイトジェネレーターpelicanを試す&#34;&gt;Python製の静的サイトジェネレーターPelicanを試す&lt;/h1&gt;

&lt;p&gt;Hugo,Hexo,Jekyllと試してきて、せっかくなのでPython製のものも試そうとPelicanを試した。&lt;/p&gt;

&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;mkdir &amp;lt;&amp;lt;blog&amp;gt;&amp;gt;
cd &amp;lt;&amp;lt;blog&amp;gt;&amp;gt;
pip install pelican Markdown
pelican-quickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんかいろいろ聞かれるので適当に答える。今回はS3にFTPで物理コピーをする運用のため、デプロイに関する質問は全てNo。&lt;/p&gt;

&lt;h2 id=&#34;記事を書く&#34;&gt;記事を書く&lt;/h2&gt;

&lt;p&gt;記事はcontent以下にreStructuredTextもしくはMarkdownで書きます。
content以下にディレクトリを配置するとそのディレクトリ名がカテゴリ名扱いされるらしい。当分はいいや。
もちろん、カテゴリはテキストファイルないのヘッダー？に記述できますので、カテゴリが必要だからといってディレクトリでわかなければいけないわけではありません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pelican content -s pelicanconf.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でoutputディレクトリに静的ファイルが生成されます。&lt;/p&gt;

&lt;p&gt;簡単ですな。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jekyllを試す</title>
      <link>http://tech.k-zak.com/2017/02/19/first-jekyll</link>
      <pubDate>Sun, 19 Feb 2017 23:22:39 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/02/19/first-jekyll</guid>
      <description>

&lt;h1 id=&#34;jekyllを試す&#34;&gt;Jekyllを試す&lt;/h1&gt;

&lt;p&gt;Ruby製の静的サイトジェネレーターを試してる。&lt;/p&gt;

&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;以下下記URLを参考にいろいろ試したけど、情報が古くコマンドが変わってた。
&lt;a href=&#34;http://melborne.github.io/2012/05/13/first-step-of-jekyll/&#34;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install jekyll
mkdir _site _posts _site assets
mkdir -p assets/css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;構造はこんな感じ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├── _config.yml
├── _layouts
│   ├── layout.html
│   └── post.html
├── _posts
├── _site
├── assets
│   └── css
└── index.md
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;jekyll serve --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で編集内容が即時される。&lt;/p&gt;

&lt;p&gt;こんな感じでやっていこうと思います。&lt;/p&gt;

&lt;p&gt;レイアウトがとてもダサイ感じなので、テーマをちゃんと作っていきたい。&lt;/p&gt;

&lt;p&gt;Ruby製だから？ヘルプが分かりやすい。&lt;/p&gt;

&lt;p&gt;静的ファイルを生成したい場合は&lt;code&gt;jekyll build&lt;/code&gt;で_siteディレクトリに生成される。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hexoを試す</title>
      <link>http://tech.k-zak.com/2017/02/19/first-hexo</link>
      <pubDate>Sun, 19 Feb 2017 22:21:50 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/02/19/first-hexo</guid>
      <description>

&lt;h1 id=&#34;javascriptの静的サイトジェネレーターhexoを試す&#34;&gt;JavaScriptの静的サイトジェネレーターHexoを試す&lt;/h1&gt;

&lt;p&gt;JavaScript(Node.js)ベースの静的サイトジェネレーターを試してみようと思った。&lt;/p&gt;

&lt;h2 id=&#34;インストールと初期設定&#34;&gt;インストールと初期設定&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;npm install -g hexo-cli
hexo init &amp;lt;&amp;lt;blog-name&amp;gt;&amp;gt;
cd &amp;lt;&amp;lt;blog-name&amp;gt;&amp;gt;
npm install
hexo server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでHexoがインストールされサイトを開始できる
&lt;code&gt;hexe server&lt;/code&gt;で開発用のサーバー起動状態になり&lt;code&gt;http://localhost:4000&lt;/code&gt;にアクセスできる。&lt;/p&gt;

&lt;p&gt;_config.ymlを編集する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;title: &amp;quot;サイトタイトル&amp;quot;
subtitle: &amp;quot;サブタイトル&amp;quot;
description: &amp;quot;サイトの説明&amp;quot;
author: &amp;lt;&amp;lt;author&amp;gt;&amp;gt;
language: ja
timezone: Asia/Tokyo

url: http://&amp;lt;&amp;lt;site-domain&amp;gt;&amp;gt;
root: /
permalink: :year/:month/:day/:title/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;languageは&lt;code&gt;ja&lt;/code&gt;にしてtimezoneは&lt;code&gt;Asia/Tokyo&lt;/code&gt;にした。
urlは公開したいドメイン、rootはトップレベルにした。&lt;/p&gt;

&lt;p&gt;permalinkの設定は&lt;code&gt;:year/:month/:day/:title/&lt;/code&gt;のデフォルト設定のままにした。&lt;/p&gt;

&lt;h2 id=&#34;記事の追加&#34;&gt;記事の追加&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;hexo new &amp;lt;&amp;lt;post-name&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでHugoみたいに初期状態のができる。
このあたり、Hugoと同じ感じで出来るので入りやすい。&lt;/p&gt;

&lt;p&gt;当初、React製の「gatsby」にしようかと思ったけど、なんか違うと思ったので、止めた。&lt;/p&gt;

&lt;h2 id=&#34;publicファイルの生成&#34;&gt;Publicファイルの生成&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;hexo generate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでファイルがpublicフォルダに出力されるので、後は目的の場所にアップロードするだけ。&lt;/p&gt;

&lt;p&gt;今回はここまで。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WordPressからHugoへ移行</title>
      <link>http://tech.k-zak.com/2017/02/19/first-hugo</link>
      <pubDate>Sun, 19 Feb 2017 00:09:41 +0900</pubDate>
      
      <guid>http://tech.k-zak.com/2017/02/19/first-hugo</guid>
      <description>

&lt;h2 id=&#34;開発メモブログをwordpressからhugoへの移行&#34;&gt;開発メモブログをWordPressからHugoへの移行&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;WordPressから記事をエクスポート&lt;/li&gt;
&lt;li&gt;Hugoをインストール&lt;/li&gt;
&lt;li&gt;エクスポートした記事を放り込む&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;wordpressから記事をエクスポート&#34;&gt;WordPressから記事をエクスポート&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;WordPressにHugo向けにエクスポートするプラグインを入れてデータを出す

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mano.xyz/post/2015-09-25-migration-to-hugo-from-wordpress/&#34;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hugoをインストール&#34;&gt;Hugoをインストール&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;brew install hugo
hugo new site techblog
cd  techblog
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;書き出した記事を放り込む&#34;&gt;書き出した記事を放り込む&lt;/h2&gt;

&lt;p&gt;プラグインを使ってエクスポートした記事データはHugoの&lt;code&gt;content/post&lt;/code&gt;のpostディレクトリ相当のものが吐き出されているので、中身を&lt;code&gt;content/post/&lt;/code&gt;にぶちまける。&lt;/p&gt;

&lt;h2 id=&#34;細かい設定&#34;&gt;細かい設定&lt;/h2&gt;

&lt;h3 id=&#34;テーマを入れる&#34;&gt;テーマを入れる&lt;/h3&gt;

&lt;p&gt;適当なテーマをインストール。今回はPolymer。
themeディレクトリがなかったら作ってその中で&lt;code&gt;git clone&lt;/code&gt;したらいいよ。&lt;/p&gt;

&lt;h3 id=&#34;config-tomlを編集&#34;&gt;config.tomlを編集&lt;/h3&gt;

&lt;p&gt;title,baseurl,languageCode,theme,paginateを修正する。&lt;/p&gt;

&lt;p&gt;後で独自ドメインでGitHubPagesで運用するため、canonifyurls = trueを設定する。&lt;/p&gt;

&lt;p&gt;GoogleAnalyticsのコードを入れるため、config.tomlに以下を追記&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[params]
  googleAnalyticsUserID = &amp;quot;&amp;lt;&amp;lt;code&amp;gt;&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;またURLの構造を検討する。
今回からパーマリンクを以下のようにした。permelink設定を追加&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[permalinks]
  post = &amp;quot;/:year/:month/:day/:slug&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでyyyy/mm/dd/slugというようなURLになる。&lt;/p&gt;

&lt;p&gt;URL構造を変更したため、取り込んだ記事のURL属性を消して代わりにSlug属性を追加。結構時間かかった。&lt;/p&gt;

&lt;p&gt;新しい記事を追加する時には&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/&amp;lt;&amp;lt;post-name&amp;gt;&amp;gt;.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で記事の初期状態のものが作られるので後は内容をMarkdownで記述していく。&lt;/p&gt;

&lt;h2 id=&#34;githubpagesで公開する&#34;&gt;GitHubPagesで公開する&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;GitHubにリポジトリを追加&lt;/li&gt;
&lt;li&gt;hugoコマンドで出力されるpublicディレクトリの静的ファイルをコミット&lt;/li&gt;
&lt;li&gt;settingsのGitHub Pagesの項にあるCustom domainにドメインを入れて保存。&lt;/li&gt;
&lt;li&gt;hugoのpublicにCNAMEというファイルを追加。内容は公開ドメイン名&lt;/li&gt;
&lt;li&gt;再度publicディレクトリの内容をコミット&lt;/li&gt;
&lt;li&gt;DNS(今回はRoute53)でCNAMEの設定をする。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;今回はひとまずこんな感じ。
今後は記事の追加だけじゃなく、テーマを自作していきたい。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>