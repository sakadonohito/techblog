<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sinatra on 開発メモてきな</title>
    <link>http://tech.k-zak.com/tags/sinatra/</link>
    <description>Recent content in Sinatra on 開発メモてきな</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 21 Oct 2012 14:00:56 +0000</lastBuildDate>
    
	<atom:link href="http://tech.k-zak.com/tags/sinatra/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>フレームワークちょいちょい</title>
      <link>http://tech.k-zak.com/2012/10/21/scriptlanguage-frameworks/</link>
      <pubDate>Sun, 21 Oct 2012 14:00:56 +0000</pubDate>
      
      <guid>http://tech.k-zak.com/2012/10/21/scriptlanguage-frameworks/</guid>
      <description>ここ最近はフレームワークを少し触ってる。
Perl：Mojolicious::Lite
→DBをFileMakerで簡単な検索をするものを作成。Liteの場合は？APPPATH/templates直下に
各ビューテンプレートファイルを置く。ベースとするレイアウトはAPPPATH/templates/
layouts直下にdefault.html.epて名前で配置する。静的ファイルはAPPPATH/public配下に配置する。
このあたりの説明でドンピシャ説明しているのが見つからなくて、なかなかつまづいた。
&amp;nbsp;
Ruby：Sinatra
→Hamlの書き方とか忘れてて大苦戦。あとなんかサーバー再起動しないと変更が摘要されない感じとか
ちょっと苦労。Mojolicious::Liteでやったのと同じ事をSinatraでも実践。という訳でDBはFileMaker。
これは前に一度やっているのでコードをちょっと変える程度だったのにとにかく上記の不可思議で苦戦。
&amp;nbsp;
PHP：FuelPHP
→最初はSilexで挑戦してたんだけど、意味不明過ぎて挫折。そんでシンプルそうなFuelに手を出す。
これもDBをFileMakerで簡単な一覧表示検索という上の２つと同じ事をやるものを作成。たいぽや
コンテキストでちょいちょい間違えて詰まったけど、割と簡単だった。FuelPHPの時は静的ファイルは
public/assetsて階層に配置するんですね。
&amp;nbsp;
PythonのFlaskに手を出す予定だったのに時間が足りなかったから来週はFlaskかな。
OS再インストールしたせいだと思うけど、前に作ったDjangoが動かなくなってた。モジュールがインポート
出来ないとかで&amp;#8230;&amp;#8230;</description>
    </item>
    
    <item>
      <title>FileMakerとRubyのSinatra</title>
      <link>http://tech.k-zak.com/2012/01/07/study-sinatra/</link>
      <pubDate>Sat, 07 Jan 2012 10:50:19 +0000</pubDate>
      
      <guid>http://tech.k-zak.com/2012/01/07/study-sinatra/</guid>
      <description>Sinatraのチュートリアルを少し触って、これなら簡単にFileMakerと接続出来るんじゃない？
と思ったのでやってみました。
gihyo.jp:第９回 SinatraとSequel・Hamlで掲示板アプリを作る
http://gihyo.jp/dev/serial/01/ruby/0009
が自分がチュートリアル(以下、見本)としてやってみみたもので、これのmodel部分をFileMakerに
置換えました。
※FileMakerやRuby、Sinatraそのものの細かい説明は省きます。
最終的な階層は以下(見本のファイルも混在してます)
&amp;#8212;
app/ start.rb model/ comment.rb view / layout.haml index.haml fmbbs.haml style.sass &amp;#8212;
FileMaker部分
・bbsテーブルの作成、カラムは見本のapp/model/comment.rb内で定義しているクラス
Commentsを真似て定義。但し、posted_dateはFileMaker側ではtimestamp型で作成時に自動で
現在のタイムスタンプが入るよう設定。
Ruby部分
・app/model/comment.rbにFileMakerとの接続クラス追加
&amp;#8212;以下をcomment.rbに追加&amp;#8212;
require &#39;rfm&#39; class FMServer def initialize() @FM_CONFIG = { :host =&amp;gt; &#34;FileMakerServerの接続先IP&#34;, :account_name =&amp;gt; &#34;FileMakerFileのログインアカウント&#34;, :password =&amp;gt; &#34;FileMakerFileのログインパスワード&#34;, :database =&amp;gt; &#34;FileMakerFileの名前&#34;, :ssl =&amp;gt; false, :root_cert =&amp;gt; false, } @fm = Rfm::Server.new(@FM_CONFIG) end def listAll(lay,sortCond) return @fm[@FM_CONFIG[:database]][lay].all(sortCond) end def create(lay,obj) @fm[@FM_CONFIG[:database]][lay].create(obj) end end ・hamlを編集(追加)</description>
    </item>
    
  </channel>
</rss>