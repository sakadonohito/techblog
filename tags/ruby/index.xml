<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on 開発メモてきな</title>
    <link>http://tech.k-zak.com/tags/ruby/index.xml</link>
    <description>Recent content in Ruby on 開発メモてきな</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <atom:link href="http://tech.k-zak.com/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>2014年を振り返る サーバーサイドプログラミング</title>
      <link>http://tech.k-zak.com/2014/12/30/milestone-serverside</link>
      <pubDate>Tue, 30 Dec 2014 09:43:52 +0000</pubDate>
      
      <guid>http://tech.k-zak.com/2014/12/30/milestone-serverside</guid>
      <description>&lt;p&gt;サーバーサイドプログラミング(Perl,PHP,Python,Ruby,etc&amp;#8230;)について振り返る&lt;/p&gt;

&lt;p&gt;まず、コンパイルする系の言語には全然手を出さなかったのでノーコメント。&lt;/p&gt;

&lt;p&gt;Groovyはちょっとだけ久しぶりに触ったらバージョンが上がってて言語仕様変わってた箇所でトラブった。&lt;/p&gt;

&lt;p&gt;Perl,Python,Rubyについては全然触れなくてフラストレーション。&lt;/p&gt;

&lt;p&gt;PHPは少し触ってたけど、使用バージョンがPHP5.4→PHP5.5→PHP5.6といろいろ触ってその間の言語仕様の変更に惑わされたりした。&lt;/p&gt;

&lt;p&gt;本当はテストコードがしっかり書けるようになりたかったけど、いろいろ自分が足りなくて駄目だった。&lt;/p&gt;

&lt;p&gt;家にたまった古い書籍も含めて処分していきたいので2015年はバシバシコードを書捨てていきたい。&lt;/p&gt;

&lt;p&gt;PHP7が来年だか再来年にリリースされることによって現場には相当バージョン違いのプロジェクトが出てしまうと思うので、できれば新規案件は&lt;/p&gt;

&lt;p&gt;枯れたPerl5系かPython3系(サポートがだいぶ長引くことになった2系も場合によっては)でチャレンジしたい。&lt;/p&gt;

&lt;p&gt;Rubyは&amp;#8230;どうだろう。試しやプロトタイプにはいいのかも、ただしSinatra限定。ツールはRuby系が多いのでRubyでいろいろ学習してから他の言語のものを使うようにするといいのかもしれない。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2014年の目標達成進捗管理的な</title>
      <link>http://tech.k-zak.com/2014/01/04/milestone</link>
      <pubDate>Sat, 04 Jan 2014 09:23:26 +0000</pubDate>
      
      <guid>http://tech.k-zak.com/2014/01/04/milestone</guid>
      <description>

&lt;h2 id=&#34;新年-明けましておめでとうございました-良いお年を&#34;&gt;新年、明けましておめでとうございました。良いお年を。&lt;/h2&gt;

&lt;p&gt;今回は、プログラムの勉強のために作成して使っているVM(Ubuntu)にredmineを動かす。という話。&lt;/p&gt;

&lt;p&gt;事の発端は新年に目標を掲げるのは意味がない。なぜならば年が改まるとかそういうタイミングでしか掲げられないような目標は普段から取り組めない達成できない目標だから。&lt;/p&gt;

&lt;p&gt;とか、意志薄弱な人間は日が経てば目標自体忘れて結果達成できない。とか、変にハードルの高い目標にしてしまって達成できなくて早々に諦めてしまうとか。&lt;/p&gt;

&lt;p&gt;そういう話を聞いたので、ならば達成出来るように達成可能と思えるような目標をredmineでマイルストーンをチケットとして分解して期日を設定して進捗管理するのはどうだろうかと考えた。&lt;/p&gt;

&lt;p&gt;要は2014年の目標はredmineで適当な目標の進捗管理を行い、その目標を達成できるよう行動する。のが目標。&lt;/p&gt;

&lt;p&gt;という事で設定作業開始&lt;/p&gt;

&lt;h2 id=&#34;環境&#34;&gt;環境:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ホストOS：OS X10.9&lt;/li&gt;
&lt;li&gt;ゲストOS(今回使用する環境)：Ubuntu13.10 32bit(ずっと64bitいれたと思っていた(T_T))&lt;/li&gt;
&lt;li&gt;nginx1.4.1(以前から使用していて今回はredmine向けに設定を変更します)&lt;/li&gt;
&lt;li&gt;ruby2.0.0dev(rbenv)&lt;/li&gt;
&lt;li&gt;unicorn4.7.0&lt;/li&gt;
&lt;li&gt;rails3.2.16&lt;/li&gt;
&lt;li&gt;redmine2.4.2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;rbenvにruby2-0を追加してデフォルトにする&#34;&gt;rbenvにruby2.0を追加してデフォルトにする&lt;/h2&gt;

&lt;p&gt;rbenvは元から入れていたので、今回は2.0を追加する作業だけ。折角だから最新を使おうってだけ。&lt;/p&gt;

&lt;p&gt;参考：&lt;a href=&#34;http://qiita.com/checkpoint/items/f8e65380d9cb0182218d&#34; target=&#34;_blank&#34;&gt;rbenvを利用して複数バージョンのRubyをインストール&lt;/a&gt;&lt;/p&gt;

&lt;pre lang=&#34;sh&#34; toggle=&#34;no&#34;&gt;~$ rbenv install 2.0.0rc-2 
~$ rbenv global 2.0.0rc-2
~$ rbenv rehash&lt;/pre&gt;

&lt;p&gt;※自分の環境ではrehashのみ、フルパス指定じゃないとエラーになる。なんでだろう。&lt;/p&gt;

&lt;p&gt;rehashの時だけsh-rehashがうんたらってエラーになる。&lt;/p&gt;

&lt;p&gt;ruby2.0の状態でgem update でアップデートしてbundler入れる。&lt;/p&gt;

&lt;pre lang=&#34;sh&#34; toggle=&#34;no&#34;&gt;~$ gem update
~$ gem install bundler
~$ gem install mysql2
~$ ~/.rbenv/bin/rbenv rehash
&lt;/pre&gt;

&lt;h2 id=&#34;mysql側の準備&#34;&gt;MySQL側の準備&lt;/h2&gt;

&lt;p&gt;redmienユーザーの作成と&lt;/p&gt;

&lt;p&gt;データベース：redmineの作成&lt;/p&gt;

&lt;h2 id=&#34;redmine入れる&#34;&gt;redmine入れる&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://redmine.jp/&#34; title=&#34;ここ&#34; target=&#34;_blank&#34;&gt;ここ&lt;/a&gt;から最新のredmineをダウンロード(今回は2.4.2)&lt;/p&gt;

&lt;p&gt;うっかり、nginxで設定済みのweb公開領域に入れてしまった。まぁいいか。&lt;/p&gt;

&lt;p&gt;DLしたredmineを解凍して任意のパスにredmineという名前にリネームして配置。&lt;/p&gt;

&lt;p&gt;redmineディレクトリ直下にGemfile.localを作成し、中に「gem unicorn」と書いておく。&lt;/p&gt;

&lt;pre lang=&#34;sh&#34; toggle=&#34;no&#34;&gt;~$ cd redmineディレクトリの場所
~$ echo &#34;gem &#39;unicorn&#39;&#34; &gt;&gt; Gemfile.local
~$ bundle install --without rmagick
&lt;/pre&gt;

&lt;p&gt;bundleでのインストールが初めてだったので、なんか引数与えてやってみたかったてのと、&lt;/p&gt;

&lt;p&gt;最初rmagick関連でエラー出たっぽいのでwithoutに指定した。原因は究明しない！&lt;/p&gt;

&lt;p&gt;ここまでで自分が詰まったのは、最初bundler入れた後rehashしてなくてbundle installのとろこで、bundler入ってねぇよ！apt-getで入れろ！ってエラー出てアワアワしてた。どうもbundler入れた後にもrehashが必要らしい。今は何故かは調べない。&lt;/p&gt;

&lt;p&gt;必要最小限にしてなかったせいか、ここでワンサカいろいろインストールされた。気がする。&lt;/p&gt;

&lt;p&gt;インストールされたgemを見た所、railsは上記環境で記載したバージョンになっていたです。&lt;/p&gt;

&lt;p&gt;終わったら、database.ymlのproductionの所を編集して自分の環境でDB接続できるようにする。&lt;/p&gt;

&lt;p&gt;開発用じゃなくてredmine使うだけなので最初からproduction。&lt;/p&gt;

&lt;p&gt;ここで一旦Webrickで動くか確認。&lt;/p&gt;

&lt;pre lang=&#34;sh&#34; toggle=&#34;no&#34;&gt;~$ rails s -e production
&lt;/pre&gt;

&lt;p&gt;動かねぇ！調べてたらお決まりの必要な処理がある事を知った。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kujira16.hateblo.jp/entry/2012/09/04/144953&#34; title=&#34;その１&#34; target=&#34;_blank&#34;&gt;その１&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.wnotes.net/blog/article/108&#34; title=&#34;その２&#34; target=&#34;_blank&#34;&gt;その２&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;書いてあることの真似をする。&lt;/p&gt;

&lt;pre lang=&#34;sh&#34; toggle=&#34;no&#34;&gt;~$ bundle exec rake generate_secret_token #セッションストアの秘密鍵を生成
~$ RAILS_ENV=production bundle exec rake db:migrate # データベースの初期設定を行う
~$ RAILS_ENV=production bundle exec rake redmine:load_default_data # デフォルトデータを設定
# 途中言語を聞かれるので、ja と入力
&lt;/pre&gt;

&lt;p&gt;終わったら再度チャレンジでWebrickが起動しました。やったね。&lt;/p&gt;

&lt;h2 id=&#34;redmineのadminユーザーのデフォルトのパスワードがわからない&#34;&gt;redmineのadminユーザーのデフォルトのパスワードがわからない！&lt;/h2&gt;

&lt;p&gt;解決策は&lt;a href=&#34;http://redmine.jp/tech_note/first-step/admin/login/&#34; title=&#34;ここ&#34; target=&#34;_blank&#34;&gt;ここ&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;unicornの設定&#34;&gt;unicornの設定&lt;/h2&gt;

&lt;p&gt;めんどくさくなってきた。上記の２リンクと関連リンクの&lt;a href=&#34;https://gist.github.com/arosh/3616832#file_unicorn&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;と、やや簡潔にかいてある&lt;a href=&#34;http://blog.scimpr.com/2013/12/14/ubuntu-server-12-04-nginx-unicorn%E3%81%A7redmine2-4-1%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99/&#34; target=&#34;_blank&#34;&gt;ブログ&lt;/a&gt;を参考に設定ファイルを書いていきましたので詳細は省きます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;１，unicorn.rbを作成。&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;　　設置パスはredmineパス/config/unicorn.rb
　　unicornのgemの中にあるサンプルからみんな調整して作成しているようです。
　　ここで一回bundle exec unicorn_rails -c config/unicorn.rb -E productionて実行する
　　そうするとunicorn.rbに書いた場所に(例えばtmp/)unicorn.pidとunidorn.sockが出来る。
　　ブラウザからアクセスしてredmine動くか確認。
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;２，unicornのデーモン&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;　　/etc/init.d/の場所にunicornて名前のファイル作るます。
　　内容は上記リンクものを参考に
　　自動起動するように設定※sysv-rc-confてファイルPerlなんですね。
&lt;/pre&gt;

&lt;p&gt;自分が作業した手順としては一気にnginxの設定編集までしてから確認して動かない！ってなったんだけど、問題切り分けのために、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unicornの設定する前段階でWebrickで動かくか(例えば、&lt;a href=&#34;http://0.0.0.0:3000&#34;&gt;http://0.0.0.0:3000&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;unicornの設定した段階でredmine動くか(例えば、&lt;a href=&#34;http://0.0.0.0:8080&#34;&gt;http://0.0.0.0:8080&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;て接続確認しながら進めたほうが良いと思われます。&lt;/p&gt;

&lt;h2 id=&#34;nginxの設定編集&#34;&gt;nginxの設定編集&lt;/h2&gt;

&lt;p&gt;既にnginxが動いている環境のため、redmine専用の設定どうするのか戸惑ったけど、単にserverディレクティブを追加すればいいみたい。upstreamディレクティブも既存の仮想ホスト設定に悪影響は出ていないみたいだ。&lt;/p&gt;

&lt;p&gt;最終的な結論から言うと動いたけど、参考にしたブログなんかと設定がちょい違う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ローカルで動かしているせいかhostsファイルにredmine用の仮想URLを追記したら動いた。※追記前は参考記事と同じ設定にしても動かなかった。&lt;/li&gt;
&lt;li&gt;動かすのに使った指定は

&lt;ol&gt;
&lt;li&gt;upstreamのunixソケットの指定&lt;/li&gt;
&lt;li&gt;追加仮想ホストのlisten port&lt;/li&gt;
&lt;li&gt;追加仮想ホストのserver_name&lt;/li&gt;
&lt;li&gt;追加仮想ホストのroot&lt;/li&gt;
&lt;li&gt;追加仮想ホストのaccess_log&lt;/li&gt;
&lt;li&gt;追加仮想ホストのerror_log&lt;/li&gt;
&lt;li&gt;追加仮想ホストのlocation / にファイルじゃなかったらproxy_passの分岐&lt;/li&gt;
&lt;li&gt;上記if文が真の時のproxy_passの指定を「http://」+「upstreamに記述した名前」&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;proxy_pass以外のproxyの設定は一つも書いてないけど動きます。なんでだろう。&lt;/p&gt;

&lt;p&gt;後で気づいたんだけど、新しい仮想ホスト定義してるのに既存の仮想ホストの設定ファイルに追記してる。アホだ。もしかしたらそのせいなのかな？てか既存仮想ホストの特定のパスの場合unicorn使えばいいのかな？できるかな？&lt;/p&gt;

&lt;p&gt;という事で無事動きました。汚い文章。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>パスカルのなんとか</title>
      <link>http://tech.k-zak.com/2013/12/22/pascal-logic</link>
      <pubDate>Sun, 22 Dec 2013 18:32:30 +0000</pubDate>
      
      <guid>http://tech.k-zak.com/2013/12/22/pascal-logic</guid>
      <description>&lt;p&gt;今回は、パスカルの三角定理？みたいなやつ&lt;/p&gt;

&lt;p&gt;PHPでは、&lt;/p&gt;

&lt;pre lang=&#34;php&#34; toggle=&#34;no&#34;&gt;&amp;lt;?php 
$num = trim(fgets(STDIN));

$num = ($num)?(int)$num:10;

$arr = array(1);
for($i=0;$i&amp;lt;$num;$i++){

    $len = count($arr);
    $tmp = array(1);
    for($j=0;$j&amp;lt;$len-1;$j++){
        array_push($tmp,$arr[$j]+$arr[$j+1]);
    }
    array_push($tmp,1);
    $arr = $tmp;
    echo join(&#39;,&#39;,$arr).&#34;\n&#34;;
}
?&amp;gt;&lt;/pre&gt;

&lt;p&gt;Perlでは、&lt;/p&gt;

&lt;pre lang=&#34;perl&#34; toggle=&#34;no&#34;&gt;#!/usr/bin/perl
use strict;
use warnings;

my $num = &amp;lt;stdin&gt;;
chomp($num);

$num ||= 10;

my @list = (1);

for(my $i=0;$i&amp;lt;$num;$i++){
    my $len = @list;
    my @tmp = (1);
    for(my $j=0;$j&amp;lt;$len-1;$j++){
        push(@tmp,$list[$j]+$list[$j+1]);
    }
    push(@tmp,1);
    @list = @tmp;
    print join(&#39;,&#39;,@list).&#34;\n&#34;;
}
&amp;lt;/stdin&gt;&lt;/pre&gt;

&lt;p&gt;Pythonでは、&lt;/p&gt;

&lt;pre lang=&#34;py&#34; toggle=&#34;no&#34;&gt;#!/usr/bin/python
if __name__ == &#39;__main__&#39;:
    num = raw_input()
    num = int(num) if num else 10
    l = [1]
    print l
    for i in range(num):
        l = map(lambda x,y:x+y,[0]+l,l+[0])
        print l
&lt;/pre&gt;

&lt;p&gt;Rubyでは、&lt;/p&gt;

&lt;pre lang=&#34;ruby&#34; toggle=&#34;no&#34;&gt;#!/usr/bin/ruby
#--*-- coding: utf-8 --*--

num = gets.to_i
num ||= 10
a=[1]

num.times{
    a=[1]+a.zip(a.slice(1..(a.size))).map{|a,b| a.to_i+b.to_i}
    p a.join(&#39; &#39;)
}
&lt;/pre&gt;

&lt;p&gt;Rubyはもっとシンプルな書き方があるのかもしれない。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>コーディングリハビリ06</title>
      <link>http://tech.k-zak.com/2013/12/08/coding-memo05</link>
      <pubDate>Sun, 08 Dec 2013 15:43:32 +0000</pubDate>
      
      <guid>http://tech.k-zak.com/2013/12/08/coding-memo05</guid>
      <description>&lt;p&gt;リハビリその3&lt;/p&gt;

&lt;p&gt;今回は、バブルソート&lt;/p&gt;

&lt;p&gt;PHPでは、&lt;/p&gt;

&lt;pre lang=&#34;php&#34; toggle=&#34;no&#34;&gt;&amp;lt;?php 
$num = trim(fgets(STDIN));

$num = ($num)?(int)$num:10;

$arr = array(1);
for($i=0;$i&amp;lt;$num;$i++){

    $len = count($arr);
    $tmp = array(1);
    for($j=0;$j&amp;lt;$len-1;$j++){
        array_push($tmp,$arr[$j]+$arr[$j+1]);
    }
    array_push($tmp,1);
    $arr = $tmp;
    echo join(&#39;,&#39;,$arr).&#34;\n&#34;;
}
?&amp;gt;&lt;/pre&gt;

&lt;p&gt;Perlでは、&lt;/p&gt;

&lt;pre lang=&#34;perl&#34; toggle=&#34;no&#34;&gt;#!/usr/bin/perl

use strict;
use warnings;

my $num = &amp;lt;STDIN&amp;gt;;
chomp($num);

$num ||= 10;

my @list = (1);

for(my $i=0;$i&amp;lt;$num;$i++){
    my $len = @list;
    my @tmp = (1);
    for(my $j=0;$j&amp;lt;$len-1;$j++){
        push(@tmp,$list[$j]+$list[$j+1]);
    }
    push(@tmp,1);
    @list = @tmp;
    print join(&#39;,&#39;,@list).&#34;\n&#34;;
}
&lt;/pre&gt;

&lt;p&gt;Pythonでは、&lt;/p&gt;

&lt;pre lang=&#34;py&#34; toggle=&#34;no&#34;&gt;#!/usr/bin/python

if __name__ == &#39;__main__&#39;:
    num = raw_input()
    num = int(num) if num else 10
    l = [1]
    print l
    for i in range(num):
        l = map(lambda x,y:x+y,[0]+l,l+[0])
        print l
&lt;/pre&gt;

&lt;p&gt;Rubyでは、&lt;/p&gt;

&lt;pre lang=&#34;ruby&#34; toggle=&#34;no&#34;&gt;#!/usr/bin/ruby
#--*-- coding: utf-8 --*--

num = gets.to_i
num ||= 10
a=[1]
num.times{
    a=[1]+a.zip(a.slice(1..(a.size))).map{|a,b| a.to_i+b.to_i}
    p a.join(&#39; &#39;)
}
&lt;/pre&gt;

&lt;p&gt;習熟度が低いのでPerlとPHPが同じ内容になる。&lt;/p&gt;

&lt;p&gt;pythonが好みだけど毎回２つリストを生成してmapしてるのでコスト高そう。&lt;/p&gt;

&lt;p&gt;すんなり1つのリストだけでできないものか&amp;#8230;&amp;#8230;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>コーディングリハビリ05</title>
      <link>http://tech.k-zak.com/2013/12/08/coding-memo05</link>
      <pubDate>Sun, 08 Dec 2013 11:47:50 +0000</pubDate>
      
      <guid>http://tech.k-zak.com/2013/12/08/coding-memo05</guid>
      <description>&lt;p&gt;昨日の文字チェックをPHP以外で試す。&lt;/p&gt;

&lt;p&gt;与えられた文字列が全てユニークな文字で構成されているかのチェック。&lt;/p&gt;

&lt;p&gt;PHPは前回やっているので、今回は掲載無し。&lt;/p&gt;

&lt;p&gt;Perlでは、&lt;/p&gt;

&lt;pre lang=&#34;perl&#34; toggle=&#34;no&#34;&gt;#!/usr/bin/perl

use strict;
use warnings;

sub check_unique{
     my $str = shift;
     my $len = length($str);
     for(my $i=0;$i&amp;lt;$len;$i++){
         my $char = substr($str,$i);
         if(index($str,$char) != rindex($str,$char)){
             return &#34;False&#34;;
         }
     }
     return &#34;True&#34;;
}

my $input = &#39;1234567890-=\`!@#$%^&amp;*()_+|~qwertyuiop[]QWERTYUIOP{}ASDFGHJKL:&#34;asdfghjkl;\&#39;zxcvbnm,./ZXCVBNM&amp;lt;&amp;gt;?&#39;;
#my $input = &amp;lt;STDIN&amp;gt;;
#chomp($input);

print check_unique($input).&#34;\n&#34;;&lt;/pre&gt;

&lt;p&gt;Pythonでは、&lt;/p&gt;

&lt;pre lang=&#34;py&#34; toggle=&#34;no&#34;&gt;#!/usr/bin/python
#--*-- coding: utf-8 --*--

import datetime

def check_unique(str):

    set_str = set(list(str))
    if len(str) == len(set_str):
        return True
    else:
        return False

if __name__ == &#34;__main__&#34;:

    input_str = &#39;1234567890-=\`!@#$%^&amp;*()_+|~qwertyuiop[]QWERTYUIOP{}ASDFGHJKL:&#34;asdfghjkl;\&#39;zxcvbnm,./ZXCVBNM&amp;lt;&amp;gt;?&#39;
    #input_str = raw_input()
    start_time = datetime.datetime.now().microsecond
    print check_unique(input_str)
    end_time = datetime.datetime.now().microsecond
    print &#34;%f&#34; % (end_time - start_time)
&lt;/pre&gt;

&lt;p&gt;Rubyでは、&lt;/p&gt;

&lt;pre lang=&#34;ruby&#34; toggle=&#34;no&#34;&gt;#!/usr/bin/ruby
#--*-- coding: utf-8 --*--

def check_unique(str)

    #インデックス最大値=文字の長さ-1
    for i in 0..str.length-1
        unless str.index(str[i].to_s) == str.rindex(str[i].to_s) then
            return false
        end
    end
    return true
end

_input = &#39;1234567890-=\`!@#$%^&amp;*()_+|~qwertyuiop[]QWERTYUIOP{}ASDFGHJKL:&#34;asdfghjkl;\&#39;zxcvbnm,./ZXCVBNM&amp;lt;&amp;gt;?&#39;

puts check_unique(_input)
&lt;/pre&gt;

&lt;p&gt;文字列のまま操作するなら指定の文字が同じ位置にあるのか先頭から検索と最後尾から検索でインデックスが同じか調べる。&lt;/p&gt;

&lt;p&gt;配列で操作するなら、重複不可の配列を作って要素数が変わってないか調べる。&lt;/p&gt;

&lt;p&gt;pythonが一番スッキリしているようだけど、やっぱりRubyかな&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>コーディングリハビリ03</title>
      <link>http://tech.k-zak.com/2013/12/06/coding-memo03</link>
      <pubDate>Fri, 06 Dec 2013 15:56:43 +0000</pubDate>
      
      <guid>http://tech.k-zak.com/2013/12/06/coding-memo03</guid>
      <description>&lt;p&gt;リハビリその3&lt;/p&gt;

&lt;p&gt;今回は、バブルソート&lt;/p&gt;

&lt;p&gt;PHPでは、&lt;/p&gt;

&lt;pre lang=&#34;php&#34; toggle=&#34;no&#34;&gt;&amp;lt;?php 

function bubble_sort(array $arr,$r){
    if(1 == $r){
        return $arr;
    }

    $len = count($arr)-1;
    for($i=0;$i&amp;lt;$len;$i++){
        if($arr[$i] &amp;gt; $arr[$i+1]){
            $tmp = $arr[$i+1];
            $arr[$i+1] = $arr[$i];
            $arr[$i] = $tmp;
        }
    }
    
    return bubble_sort($arr,$r-1);

}

$input = trim(fgets(STDIN));
$arr = explode(&#34;,&#34;,$input);

echo implode(&#34;,&#34;,bubble_sort($arr,count($arr))).&#34;\n&#34;;
?&amp;gt;&lt;/pre&gt;

&lt;p&gt;Perlでは、&lt;/p&gt;

&lt;pre lang=&#34;perl&#34; toggle=&#34;no&#34;&gt;#!/usr/bin/perl

use strict;
use warnings;

sub bubble_sort{
    my($arr,$r) = @_;
    my @arr = @{$arr};

    if(1 == $r){
        return @arr;
    }else{
        my $len = @arr;
        for(my $i=0;$i&amp;lt;$len-1;$i++){
            if($arr[$i] &amp;gt; $arr[$i+1]){
                my $tmp = $arr[$i+1];
                $arr[$i+1] = $arr[$i];
                $arr[$i] = $tmp;
            }
        }
        bubble_sort(\@arr,$r-1)
    }
}

my $input = &amp;lt;STDIN&amp;gt;;
chomp($input);
my @arr = split(&#39;,&#39;,$input);

print join(&#34;,&#34;,bubble_sort(\@arr,$#arr+1)).&#34;\n&#34;;
&lt;/pre&gt;

&lt;p&gt;Pythonでは、&lt;/p&gt;

&lt;pre lang=&#34;py&#34; toggle=&#34;no&#34;&gt;#!/usr/bin/python

def bubble_sort(arr,size=None):
    if size == None:
        size = len(arr)

    if 1 == size:
        return arr
    else:
    
        for i in range(0,len(arr)-1):
            if arr[i] &amp;gt; arr[i+1]:
                arr[i],arr[i+1] = arr[i+1],arr[i]
    
        return bubble_sort(arr,size-1)
        #return arr

if __name__ == &#39;__main__&#39;:

    input_list = map(lambda x:int(x),raw_input().split(&#34;,&#34;))
    print bubble_sort(input_list)
&lt;/pre&gt;

&lt;p&gt;Rubyでは、&lt;/p&gt;

&lt;pre lang=&#34;ruby&#34; toggle=&#34;no&#34;&gt;#!/usr/bin/ruby
# -*- coding: utf-8 -*-

def bubble_sort arr,k = arr.size
    return arr if 1 == k
    (arr.size-1).times do |i|
        arr[i],arr[i+1] = arr[i+1],arr[i] if arr[i] &amp;gt; arr[i+1]
    end
    bubble_sort(arr,k-1)
end

arr = gets.chomp.to_s.split(&#34;,&#34;)
arr.map!{|i| i.to_i }

bubble_sort arr

p arr
&lt;/pre&gt;

&lt;p&gt;Rubyが一番スマートかな&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>コーディングリハビリ02</title>
      <link>http://tech.k-zak.com/2013/12/06/coding-memo02</link>
      <pubDate>Fri, 06 Dec 2013 15:27:55 +0000</pubDate>
      
      <guid>http://tech.k-zak.com/2013/12/06/coding-memo02</guid>
      <description>&lt;p&gt;リハビリその２&lt;/p&gt;

&lt;p&gt;今回は、ファイル読み込みとその時の簡単な例外処理&lt;/p&gt;

&lt;p&gt;読み込むテキストファイルの内容は以下の通り、&lt;/p&gt;

&lt;pre&gt;7
1000

1992
あ
A
2000
2001
1900
16
12
400
&lt;/pre&gt;

&lt;p&gt;PHPでは、&lt;/p&gt;

&lt;pre lang=&#34;php&#34; toggle=&#34;no&#34;&gt;&amp;lt;?php 

function isLeap($year=null){
    if($year == null) return false;
    $intYear = (int)$year;
    if(0 != $intYear%4){
        return false;
    }elseif(0 == $intYear%400){
        return true;
    }elseif(0 == $intYear%100){
        return false;
    }else{
        return true;
    }
}
try{
    if(!file_exists(&#34;leap.txt&#34;)){
        throw new Exception(&#34;ファイルが見つかりません。&#34;);
    }

    $fp = fopen(&#34;leap.txt&#34;,&#34;r&#34;);

    $lines = fgets($fp);
    for($i=0;$i&amp;lt;$lines;$i++){
        $year = trim(fgets($fp));
        printf(&#34;%s is%s a leap year\n&#34;, $year,((isLeap($year))?&#34;&#34;:&#34; not&#34;));
    }

    fclose($fp);

}catch(Exception $e){
    echo $e-&amp;gt;getMessage().&#34;\n&#34;;
}

?&amp;gt;&lt;/pre&gt;

&lt;p&gt;Perlでは、&lt;/p&gt;

&lt;pre lang=&#34;perl&#34; toggle=&#34;no&#34;&gt;#!/usr/bin/perl

use strict;
use warnings;

sub isLeap{
    my $year = shift;
    unless($year =~ /^[0-9]+$/ ){
        return 0;
    }
    if(0 != $year%4){
        return 0;
    }elsif(0 == $year%400){
        return 1;
    }elsif(0 == $year%100){
        return 0;
    }else{
        return 1;
    }
}

my $filename = &#34;leap.txt&#34;;
open(my $fp, &#39;&amp;lt;&#39;,$filename) or die $!;
my $lines = &amp;lt;$fp&amp;gt;;
chomp($lines);
#print $lines;
for(my $i=0;$i&amp;lt;$lines;$i++){
    my $year = &amp;lt;$fp&amp;gt;;
    chomp($year);
    if(isLeap($year)){
        print $year,&#34; is a leap year\n&#34;;
    }else{
        print $year,&#34; is not a leap year\n&#34;;
    }
}

close($fp);&lt;/pre&gt;

&lt;p&gt;Pythonでは、&lt;/p&gt;

&lt;pre lang=&#34;py&#34; toggle=&#34;no&#34;&gt;#!/usr/bin/python

def is_leap(year=None):
    if not isinstance(year,int):
        return False
    elif 0 != year % 4:
        return False
    elif 0 == year % 400:
        return True
    elif 0 == year % 100:
        return False
    else:
        return True

if __name__ == &#39;__main__&#39;:
    file_name = &#39;leap.txt&#39;
    try:
        f = open(file_name,&#39;r&#39;)
        lines = int(f.readline().rstrip())
        #print lines
        for i in range(0,lines):
            y = f.readline().rstrip()
            #print y
            if is_leap(y):
                print &#34;%s is a leap year&#34; % y
            else:
                print &#34;%s is not a leap year&#34; % y
        f.close()
    except IOError as e:
        print e.strerror&lt;/pre&gt;

&lt;p&gt;Rubyでは、&lt;/p&gt;

&lt;pre lang=&#34;ruby&#34; toggle=&#34;no&#34;&gt;#!/usr/bin/ruby
# -*- coding: utf-8 -*-

def is_leap(year)
    unless /^[0-9]+$/ =~ year then
        return false
    end

    if 0 != year%4 then
        return false
    elsif 0 == year%400 then
        return true
    elsif 0 == year%100 then
        return false
    else
        return true
    end
end

begin
    f = open(&#34;leap.txt&#34;)

    lines = f.gets.to_i
    lines.times do |i|
        y = f.gets.chomp
        if is_leap(y) then
            puts y+&#34; is a leap year&#34;
        else
            puts y+&#34; is not a leap year&#34;
        end
    end
    f.close
rescue =&amp;gt; e
    p e
end&lt;/pre&gt;

&lt;p&gt;うるう年の判定処理は適当。pythonが一番しっくりくるかな。&lt;/p&gt;

&lt;p&gt;rubyはreturnを省略した場合に最後に評価された値がreturnされるんだけど、pythonもだと勘違いしててハマった。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>コーディングリハビリ01</title>
      <link>http://tech.k-zak.com/2013/12/06/coding-memo01</link>
      <pubDate>Fri, 06 Dec 2013 14:34:06 +0000</pubDate>
      
      <guid>http://tech.k-zak.com/2013/12/06/coding-memo01</guid>
      <description>&lt;p&gt;一定時間未満の習得状態だと、日々使ってないとすぐ書けなくなりますね。プログラミング言語というのは。&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;paiza&#34; href=&#34;https://paiza.jp/mypage&#34; target=&#34;_blank&#34;&gt;paiza&lt;/a&gt;なんかの超初級問題も関数のリファレンスとか見ながらじゃないと全く解けない。&lt;/p&gt;

&lt;p&gt;という事でリハビリ。&lt;/p&gt;

&lt;p&gt;今回は標準入力。&lt;/p&gt;

&lt;p&gt;PHPでは、&lt;/p&gt;

&lt;pre lang=&#34;php&#34; toggle=&#34;no&#34;&gt;&amp;lt;?php 
//標準入力をfgets関数で取得して前後の空白や改行文字を削り取る 
$input = trim(fgets(STDIN)); 
?&amp;gt;&lt;/pre&gt;

&lt;p&gt;Perlでは、&lt;/p&gt;

&lt;pre lang=&#34;perl&#34; toggle=&#34;no&#34;&gt;use strict;
use warnings;

my $input = &amp;lt;STDIN&amp;gt;;
#行末の改行文字を削る
chomp($input);&lt;/pre&gt;

&lt;p&gt;Pythonでは、&lt;/p&gt;

&lt;pre lang=&#34;py&#34; toggle=&#34;no&#34;&gt;input = raw_input()
#行末の改行文字とるのは厳密にはいろいろあるらしいので今回は無視&lt;/pre&gt;

&lt;p&gt;Rubyでは、&lt;/p&gt;

&lt;pre lang=&#34;ruby&#34; toggle=&#34;no&#34;&gt;input = gets.chomp&lt;/pre&gt;

&lt;p&gt;標準入力が「gets」だけで取れるRubyはダンディ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>フレームワークちょいちょい</title>
      <link>http://tech.k-zak.com/2012/10/21/scriptlanguage-frameworks</link>
      <pubDate>Sun, 21 Oct 2012 14:00:56 +0000</pubDate>
      
      <guid>http://tech.k-zak.com/2012/10/21/scriptlanguage-frameworks</guid>
      <description>&lt;p&gt;ここ最近はフレームワークを少し触ってる。&lt;/p&gt;

&lt;p&gt;Perl：Mojolicious::Lite&lt;/p&gt;

&lt;p&gt;→DBをFileMakerで簡単な検索をするものを作成。Liteの場合は？APPPATH/templates直下に&lt;/p&gt;

&lt;p&gt;各ビューテンプレートファイルを置く。ベースとするレイアウトはAPPPATH/templates/&lt;/p&gt;

&lt;p&gt;layouts直下にdefault.html.epて名前で配置する。静的ファイルはAPPPATH/public配下に配置する。&lt;/p&gt;

&lt;p&gt;このあたりの説明でドンピシャ説明しているのが見つからなくて、なかなかつまづいた。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Ruby：Sinatra&lt;/p&gt;

&lt;p&gt;→Hamlの書き方とか忘れてて大苦戦。あとなんかサーバー再起動しないと変更が摘要されない感じとか&lt;/p&gt;

&lt;p&gt;ちょっと苦労。Mojolicious::Liteでやったのと同じ事をSinatraでも実践。という訳でDBはFileMaker。&lt;/p&gt;

&lt;p&gt;これは前に一度やっているのでコードをちょっと変える程度だったのにとにかく上記の不可思議で苦戦。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;PHP：FuelPHP&lt;/p&gt;

&lt;p&gt;→最初はSilexで挑戦してたんだけど、意味不明過ぎて挫折。そんでシンプルそうなFuelに手を出す。&lt;/p&gt;

&lt;p&gt;これもDBをFileMakerで簡単な一覧表示検索という上の２つと同じ事をやるものを作成。たいぽや&lt;/p&gt;

&lt;p&gt;コンテキストでちょいちょい間違えて詰まったけど、割と簡単だった。FuelPHPの時は静的ファイルは&lt;/p&gt;

&lt;p&gt;public/assetsて階層に配置するんですね。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;PythonのFlaskに手を出す予定だったのに時間が足りなかったから来週はFlaskかな。&lt;/p&gt;

&lt;p&gt;OS再インストールしたせいだと思うけど、前に作ったDjangoが動かなくなってた。モジュールがインポート&lt;/p&gt;

&lt;p&gt;出来ないとかで&amp;#8230;&amp;#8230;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FileMakerとRubyのSinatra</title>
      <link>http://tech.k-zak.com/2012/01/07/study-sinatra</link>
      <pubDate>Sat, 07 Jan 2012 10:50:19 +0000</pubDate>
      
      <guid>http://tech.k-zak.com/2012/01/07/study-sinatra</guid>
      <description>&lt;p&gt;Sinatraのチュートリアルを少し触って、これなら簡単にFileMakerと接続出来るんじゃない？&lt;/p&gt;

&lt;p&gt;と思ったのでやってみました。&lt;/p&gt;

&lt;p&gt;gihyo.jp:第９回 SinatraとSequel・Hamlで掲示板アプリを作る&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gihyo.jp/dev/serial/01/ruby/0009&#34;&gt;http://gihyo.jp/dev/serial/01/ruby/0009&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;が自分がチュートリアル(以下、見本)としてやってみみたもので、これのmodel部分をFileMakerに&lt;/p&gt;

&lt;p&gt;置換えました。&lt;/p&gt;

&lt;p&gt;※FileMakerやRuby、Sinatraそのものの細かい説明は省きます。&lt;/p&gt;

&lt;p&gt;最終的な階層は以下(見本のファイルも混在してます)&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;pre&gt;app/
    start.rb
    model/
           comment.rb
    view /
           layout.haml
           index.haml
           fmbbs.haml
           style.sass&lt;/pre&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;FileMaker部分&lt;/p&gt;

&lt;p&gt;・bbsテーブルの作成、カラムは見本のapp/model/comment.rb内で定義しているクラス&lt;/p&gt;

&lt;p&gt;Commentsを真似て定義。但し、posted_dateはFileMaker側ではtimestamp型で作成時に自動で&lt;/p&gt;

&lt;p&gt;現在のタイムスタンプが入るよう設定。&lt;/p&gt;

&lt;p&gt;Ruby部分&lt;/p&gt;

&lt;p&gt;・app/model/comment.rbにFileMakerとの接続クラス追加&lt;/p&gt;

&lt;p&gt;&amp;#8212;以下をcomment.rbに追加&amp;#8212;&lt;/p&gt;

&lt;pre lang=&#34;ruby&#34;&gt;require &#39;rfm&#39;
class FMServer
  def initialize()
    @FM_CONFIG = {
      :host =&amp;gt; &#34;FileMakerServerの接続先IP&#34;,
      :account_name =&amp;gt; &#34;FileMakerFileのログインアカウント&#34;,
      :password =&amp;gt; &#34;FileMakerFileのログインパスワード&#34;,
      :database =&amp;gt; &#34;FileMakerFileの名前&#34;,
      :ssl =&amp;gt; false,
      :root_cert =&amp;gt; false,
    }
    @fm = Rfm::Server.new(@FM_CONFIG)
  end

  def listAll(lay,sortCond)
    return @fm[@FM_CONFIG[:database]][lay].all(sortCond)
  end

  def create(lay,obj)
    @fm[@FM_CONFIG[:database]][lay].create(obj)
  end
end&lt;/pre&gt;

&lt;p&gt;・hamlを編集(追加)&lt;/p&gt;

&lt;p&gt;&amp;#8212;app/view/fmbbs.haml&lt;/p&gt;

&lt;pre&gt;%form{:method=&amp;gt;&#34;POST&#34;,:action =&amp;gt; &#39;/fmcomment&#39;}
  %input{:type=&amp;gt;&#34;hidden&#34;,:name=&amp;gt;&#34;_method&#34;,:value=&amp;gt;&#34;PUT&#34;}
  %table
    %tr
      %td 名前
      %td
        %input{:type=&amp;gt;&#34;text&#34;,:name=&amp;gt;&#34;name&#34;}
    %tr
      %td タイトル
      %td
        %input{:type=&amp;gt;&#34;text&#34;,:name=&amp;gt;&#34;title&#34;}
    %tr
      %td 内容
      %td
        %textarea{:name=&amp;gt;&#34;message&#34;,:cols=&amp;gt;60,:rows=&amp;gt;8}
    %tr
      %td
      %td
        %input{:type=&amp;gt;&#34;submit&#34;}

- @comments.each do |comment|
  .comment
    %h2= h comment.title
    .info
      %span.name== by #{h comment.name}
      %span.date== (#{timestamp_text(comment.posted_date)})

    .message
      == #{formatted_text(comment.message)}&lt;/pre&gt;

&lt;p&gt;※HamlはPythonのようにインデントが文法になってるので注意！&lt;/p&gt;

&lt;p&gt;・app/start.rbを編集&lt;/p&gt;

&lt;p&gt;&amp;#8212;app/start.rbを以下のように変更&amp;#8212;&lt;/p&gt;

&lt;pre lang=&#34;ruby&#34;&gt;#/usr/bin/ruby

require &#39;rubygems&#39;
require &#39;sinatra&#39;
require &#39;model/comment.rb&#39;
require &#39;sass&#39;

helpers do
  include Rack::Utils;alias_method :h, :escape_html
  #追加
  def timestamp_text(date)
    date.strftime(&#34;%Y/%m/%d %H:%M:%S&#34;)
  end
  #追加
  def formatted_text(text)
    Rack::Utils.escape_html(text).gsub(/n/,&#34;&#34;)
  end
end

get &#39;/style.css&#39; do
  content_type &#39;text/css&#39;,:charset =&amp;gt; &#39;utf-8&#39;
  sass :style
end

get &#39;/&#39; do
  @comments = Comments.order_by(:posted_date.desc)
  haml :index
end

put &#39;/comment&#39; do
  Comments.create({
    :name =&amp;gt; request[:name],
    :title =&amp;gt; request[:title],
    :message =&amp;gt; request[:message],
    :posted_date =&amp;gt; Time.now,
  })
  redirect &#39;/&#39;
end

#追加
get &#39;/fmbbs&#39; do
  fm = FMServer.new
  @comments = fm.listAll(&#34;bbs&#34;,{:sort_field =&amp;gt; &#34;posted_date&#34;,:sort_order =&amp;gt; &#39;descend&#39;})
  haml :fmbbs
end

#追加
put &#39;/fmcomment&#39; do
  fm = FMServer.new
  obj = {
    :name =&amp;gt; request[:name],
    :title =&amp;gt; request[:title],
    :message =&amp;gt; request[:message],
    #posted_dateは含めない
  }
  fm.create(&#34;bbs&#34;,obj)
  redirect &#39;/fmbbs&#39;
end&lt;/pre&gt;

&lt;p&gt;・rfm(lardawge-rfm)をインストールするの忘れずに！&lt;/p&gt;

&lt;p&gt;$ sudo gem install lardawge-rfm&lt;/p&gt;

&lt;p&gt;GitHub：&lt;a href=&#34;https://github.com/lardawge/rfm&#34;&gt;https://github.com/lardawge/rfm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これでstart.rbのある位置をカレントにして&lt;/p&gt;

&lt;p&gt;$ ruby -rubygems start.rb&lt;/p&gt;

&lt;p&gt;これで&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:4567/fmbbs&#34;&gt;http://localhost:4567/fmbbs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;で試せます。簡単ですね！&lt;/p&gt;

&lt;p&gt;今回、自分がつまずいた所は、&lt;/p&gt;

&lt;p&gt;１，rfm経由でFileMakerにレコード作成(多分編集も同じ)でtimestamp型のカラムに値を&lt;/p&gt;

&lt;p&gt;設定するための方法が分からなかった。※DateTime型だとエラーになる、整形してもエラー&lt;/p&gt;

&lt;p&gt;になる。なんでや！&lt;/p&gt;

&lt;p&gt;→読み込みは出来るので、FileMaker側で作成時自動で値設定にした。&lt;/p&gt;

&lt;p&gt;２，投稿済みデータの降順ソートがうまくいかない！&lt;/p&gt;

&lt;p&gt;→lardawge-rfmでは降順の指定が&amp;#8221;desc&amp;#8221;ではなく、&amp;#8221;descend&amp;#8221;だった。&lt;/p&gt;

&lt;p&gt;Railsでやるほどじゃないけどちょっと簡単にFileMakerとWebアプリつなぎたいとか、これで&lt;/p&gt;

&lt;p&gt;どうでしょうか？&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WebフレームワークとFileMaker</title>
      <link>http://tech.k-zak.com/2011/05/29/web-filemaker</link>
      <pubDate>Sun, 29 May 2011 04:16:39 +0000</pubDate>
      
      <guid>http://tech.k-zak.com/2011/05/29/web-filemaker</guid>
      <description>&lt;p&gt;FileMaker用のブログに書こうかと思ったけどこちらに書く&lt;/p&gt;

&lt;div&gt;
  FileMakerというアクセスとMSSQLの中間みたいなApple子会社のメーカーの
&lt;/div&gt;

&lt;div&gt;
  データベースアプリをDBとしてブラウザUIのアプリを開発するには大きく分けて
&lt;/div&gt;

&lt;div&gt;
  ２つの方法があります。
&lt;/div&gt;

&lt;div&gt;
  １，FileMaker社が提供しているPHPのAPIを使いPHPで開発する
&lt;/div&gt;

&lt;div&gt;
  ２，FileMaker社が提供しているXMLでのやり取りの方法を利用し、開発する。
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  で、世間では１，の方法がイマイチらしく実質２，の方法が取られている。
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  ２，の方法の場合、クエリを投げる→XMLが返ってくる→パースするという方法。
&lt;/div&gt;

&lt;div&gt;
  ちょっと厄介なのは、FileMaker社の定めたXML文法なので「初めてのXML」みたいな本では
&lt;/div&gt;

&lt;div&gt;
  載っていない文法のXMLが返ってくる。
&lt;/div&gt;

&lt;div&gt;
  具体的にはメタ情報(カラム名含む)が最初のメタタグにドサっと入っていて、その後に
&lt;/div&gt;

&lt;div&gt;
  rowタグ(レコード)colタグ(カラム)がある。何が厄介かというと、カラム名のついたタグが
&lt;/div&gt;

&lt;div&gt;
  rowタグの中にあるのではなく、本当に&amp;#8221;col&amp;#8221;という名のタグが入っているからメタタグの
&lt;/div&gt;

&lt;div&gt;
  カラム情報を見て何番目がこのカラムとか処理しないといけない。フヒーー
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  で、世間ではどうしているのかというと、
&lt;/div&gt;

&lt;div&gt;
  a,FileMaker文法を解釈するxsltで開発
&lt;/div&gt;

&lt;div&gt;
  b,PHPでライブラリが出ているのでそれを使う(FX.php)
&lt;/div&gt;

&lt;div&gt;
  c,Rubyでライブラリが出ているのでそれを使う(rfm)
&lt;/div&gt;

&lt;div&gt;
  d,Pythonでライブラリが出ているのでそれを使う(PyFileMaker)
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  ってところ。
&lt;/div&gt;

&lt;div&gt;
  実際にはFX.phpを利用するのがメジャーでしょう。。
&lt;/div&gt;

&lt;div&gt;
  これらのライブラリがうまいことレコードオブジェクトに変換してくれるので、
&lt;/div&gt;

&lt;div&gt;
  案外簡単に扱える。ただ、困ったときに解決できるようXMLリクエストの文法位は
&lt;/div&gt;

&lt;div&gt;
  ある程度覚えておいたほうが良いと思う。
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  ぶっちゃけると、XMLリクエスト組み立てと返ってきたXMLをパースするライブラリを
&lt;/div&gt;

&lt;div&gt;
  作れさえすれば、言語は何でも良いという事。
&lt;/div&gt;

&lt;div&gt;
  なので上記に出てきていない、PerlやGroovy用のライブラリを作れば同じこと出来る。
&lt;/div&gt;

&lt;div&gt;
  Groovy用ならRubyやPythonのライブラリの中身を見ながら出来るかもしれないけど
&lt;/div&gt;

&lt;div&gt;
  Perlは自分には無理。そもそもPerlがほぼ分からない。
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  Ruby用とPython用の、それから前に仕事でPHP用のを使ってみた感想としては
&lt;/div&gt;

&lt;div&gt;
  Pythonの柔軟性が奏功して１歩抜きん出ている感じ。ただし開発が終わってしまっている
&lt;/div&gt;

&lt;div&gt;
  ようなので、将来性は微妙。
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  Pythonは多重継承が出来るので、例えばDjangoなんかでmodelクラスとPyFileMakerの
&lt;/div&gt;

&lt;div&gt;
  両方を継承するなんてことが、できそう。自分は理解が足りなかったので、modelを
&lt;/div&gt;

&lt;div&gt;
  継承したクラスの1プロパティとしてFMServerオブジェクトを持たせてみた。
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  PHPのFX.phpはCodeIgniterやCakePHPでモデルとして使えるような方法が出来ている。
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  一方、Rubyのはちょっと分かりづらい。いや正確にはRailsを理解しないまま試し他自分が
&lt;/div&gt;

&lt;div&gt;
  悪いのですけど。。。
&lt;/div&gt;

&lt;div&gt;
  現状では、Railsの設定でActiveRecordを使わない設定にしてControllerに全て処理を書く
&lt;/div&gt;

&lt;div&gt;
  みたいなやり方になってしまうようです。
&lt;/div&gt;

&lt;div&gt;
  Railsの仕組みやRubyのmix-inの仕組みとか理解できると別の方法が見つかりそうですけど。
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  ◆PHPでFileMaker
&lt;/div&gt;

&lt;div&gt;
  ・FX.php &lt;a href=&#34;http://msyk.net/fmp/fx_ja/&#34;&gt;http://msyk.net/fmp/fx_ja/&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
  ・CodeIgniter でFX.php
&lt;/div&gt;

&lt;div&gt;
  &lt;a href=&#34;http://codeigniter.com/wiki/FilemakerPro_Database_Integration/&#34;&gt;http://codeigniter.com/wiki/FilemakerPro_Database_Integration/&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
  ・CakePHPでFX.php &lt;a href=&#34;http://www.beezwax.net/solutions/FMCakeMix&#34;&gt;http://www.beezwax.net/solutions/FMCakeMix&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  ◆RubyでFileMaker
&lt;/div&gt;

&lt;div&gt;
  ・rfm &lt;a href=&#34;http://www.famlog.jp/rfm/&#34;&gt;http://www.famlog.jp/rfm/&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  ◆PythonでFileMaker
&lt;/div&gt;

&lt;div&gt;
  ・PyFileMaker &lt;a href=&#34;http://code.google.com/p/pyfilemaker/&#34;&gt;http://code.google.com/p/pyfilemaker/&lt;/a&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>